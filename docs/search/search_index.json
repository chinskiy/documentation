{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 The Introduction Presentation can be found here What is Osmedeus? \u00b6 Osmedeus is a Workflow Engine for Offensive Security. It was designed to build a foundation with the capability and flexibility that allow you to automatic run your reconnaissance methodology on a large number of targets. Showcases \u00b6 The Engine has successfully found a tremendous number of security vulnerabilities in many big companies out there with My reconnaissance methodology Gettting Started \u00b6 Click here to know how to Installation Osmedeus Learn more about the Architecture of Osmedeus Demo Video can be found here Features \u00b6 Significantly speed up your recon process Organize your scan results Efficiently to customize and optimize your recon process Seamlessly integrate with new public and private tools Easy to scale across large number of targets Easy to synchronize the results across many places","title":"Home"},{"location":"#introduction","text":"The Introduction Presentation can be found here","title":" Introduction"},{"location":"#what-is-osmedeus","text":"Osmedeus is a Workflow Engine for Offensive Security. It was designed to build a foundation with the capability and flexibility that allow you to automatic run your reconnaissance methodology on a large number of targets.","title":"What is Osmedeus?"},{"location":"#showcases","text":"The Engine has successfully found a tremendous number of security vulnerabilities in many big companies out there with My reconnaissance methodology","title":"Showcases"},{"location":"#gettting-started","text":"Click here to know how to Installation Osmedeus Learn more about the Architecture of Osmedeus Demo Video can be found here","title":"Gettting Started"},{"location":"#features","text":"Significantly speed up your recon process Organize your scan results Efficiently to customize and optimize your recon process Seamlessly integrate with new public and private tools Easy to scale across large number of targets Easy to synchronize the results across many places","title":"Features"},{"location":"architecture/","text":"Architecture \u00b6 Manifest \u00b6 The main philosophy of Osmedeus was never meant to be the that replace your tools or any other tools. It was designed to build a foundation with the capability and flexibility that allow you to make your recon system faster, cleaner and much more powerful. The structure of the Osmedeus \u00b6 The tool has two main components: Core Engine written in Golang that is responsible for handling all the logic and a Workflow which is a collection of YAML files that describe your methodology Target can be domain, url, IP, CIDR or anything that fit your workflow. Comparison to the old version \u00b6 How does Osmedeus actually work? \u00b6 Osmedeus will take your input along with the selected flow/module to create a routine that contains a list of commands and logic to complete the scan. Behind the scene, it actually runs other 3rd party tools with special logic generated by Osmedeus core.","title":"Overview"},{"location":"architecture/#architecture","text":"","title":" Architecture"},{"location":"architecture/#manifest","text":"The main philosophy of Osmedeus was never meant to be the that replace your tools or any other tools. It was designed to build a foundation with the capability and flexibility that allow you to make your recon system faster, cleaner and much more powerful.","title":"Manifest"},{"location":"architecture/#the-structure-of-the-osmedeus","text":"The tool has two main components: Core Engine written in Golang that is responsible for handling all the logic and a Workflow which is a collection of YAML files that describe your methodology Target can be domain, url, IP, CIDR or anything that fit your workflow.","title":"The structure of the Osmedeus"},{"location":"architecture/#comparison-to-the-old-version","text":"","title":"Comparison to the old version"},{"location":"architecture/#how-does-osmedeus-actually-work","text":"Osmedeus will take your input along with the selected flow/module to create a routine that contains a list of commands and logic to complete the scan. Behind the scene, it actually runs other 3rd party tools with special logic generated by Osmedeus core.","title":"How does Osmedeus actually work?"},{"location":"donation/","text":"Donation \u00b6 If you love my tools and would like to support my work, please check out some donation methods below. Sponsor \u00b6 You or your organization would like to sponsor my projects or show your logo on the project documentation page feel free to contact me via here For Everyone \u00b6 Become a backer on opencollective and you will appear here. For Crypto Fan \u00b6 or if you want to copy in text BNB (BEP20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 BTC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458 ETH (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 USDT (BEP20): 0xaFC10B8064fDD47D04F1bFd8E6Ab59334711cAE6 USDT (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 SOL: 6w4kMFhS61VGVvgxW29sdC3jnzbAFpP2Cpcd4UJXVSZc For People in My local country \u00b6","title":"Sponsor & Donation"},{"location":"donation/#donation","text":"If you love my tools and would like to support my work, please check out some donation methods below.","title":"Donation"},{"location":"donation/#sponsor","text":"You or your organization would like to sponsor my projects or show your logo on the project documentation page feel free to contact me via here","title":"Sponsor"},{"location":"donation/#for-everyone","text":"Become a backer on opencollective and you will appear here.","title":"For Everyone"},{"location":"donation/#for-crypto-fan","text":"or if you want to copy in text BNB (BEP20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 BTC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458 ETH (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 USDT (BEP20): 0xaFC10B8064fDD47D04F1bFd8E6Ab59334711cAE6 USDT (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 SOL: 6w4kMFhS61VGVvgxW29sdC3jnzbAFpP2Cpcd4UJXVSZc","title":"For Crypto Fan"},{"location":"donation/#for-people-in-my-local-country","text":"","title":"For People in My local country"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 How to setup the Osmedeus? Please check out installation guide here I love the Osmedeus community. Is there any premium subscription? Please check out the premium package here Is it support Windows? Unfortunately not, it was designed for Linux only. You will need to use Docker or VM if you really want to run Osmedeus on Windows. What are the donation tiers and how much should I donate to be eligible for the premium package? You can join the Patreon here or here to see a private post contains a download link for premium packages. After that you will be invited to backer channel to get direct support then What is the specification required to run Osmedeus? I recommend using VPS since it takes a lot of network bandwidth, the minimum spec would be 1 CPU 2GB RAM. You can of course increase or decrease the threads in the workflow to make it work in any spec How can I update my Osmedeus? Just run the install script again and it will be updated. Run rm -rf /root/osmedeus-base /root/.osmedeus first if you want to have a fresh install. Does the X scan run tool Y or not? Read the flow and module files to see what a step actually run Seriously, read the flow and module files. Remember that you were warned twice about reading the flow and module files. Just search your tool command no the workflow folder. Where can I find the result after the scan done? All of your scan data store at ~/.osmedeus/workspaces/ I got some error while running the scan? You can use osmedeus health command to check if the install is okay or not. Sometimes error show up mean some of the tools require token to run like github-subdomains but you can ignore it since I already catch the error Where I can get a live support? You can Join Discord Server here to see if anyone can help I have an awesome idea, How can I implement it in Osmedeus? You can Join Discord Server here or contact me via here to see if it worth to add. I ran the scan but there's no vulnerability found? It's simply that there's no vulnerability. It very depends on your target. How can I update my premium package? Just run the install script for premium package again and it will be updated. Why was my scan stuck at portscan? It will stay there because it got a sudo password prompt. Some special tools require root permission to run like nmap . Make sure you allow nmap can be run without sudo password prompt. Why was my scan portscan take so long? It's probably because cloud provider / home network limit your portscan or just simply your input is too big. Try to run with --debug then you can manually check with the raw command that the portscan module actually running. What is the difference between this flow to other flow? Read the flow files to see what difference in them. Seriously, Read the flow files. Remember that you were warned twice about reading read the flow files. Just use diff comparison of each flow file and see what difference field mean here Where should I put my token (Github, Shodan, etc)? All you need to do is follow this guide I found a new tool that pretty awesome. Can you add it in Osmedeus? Yes, just follow this page to added it to your workflow this guide .","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"How to setup the Osmedeus? Please check out installation guide here I love the Osmedeus community. Is there any premium subscription? Please check out the premium package here Is it support Windows? Unfortunately not, it was designed for Linux only. You will need to use Docker or VM if you really want to run Osmedeus on Windows. What are the donation tiers and how much should I donate to be eligible for the premium package? You can join the Patreon here or here to see a private post contains a download link for premium packages. After that you will be invited to backer channel to get direct support then What is the specification required to run Osmedeus? I recommend using VPS since it takes a lot of network bandwidth, the minimum spec would be 1 CPU 2GB RAM. You can of course increase or decrease the threads in the workflow to make it work in any spec How can I update my Osmedeus? Just run the install script again and it will be updated. Run rm -rf /root/osmedeus-base /root/.osmedeus first if you want to have a fresh install. Does the X scan run tool Y or not? Read the flow and module files to see what a step actually run Seriously, read the flow and module files. Remember that you were warned twice about reading the flow and module files. Just search your tool command no the workflow folder. Where can I find the result after the scan done? All of your scan data store at ~/.osmedeus/workspaces/ I got some error while running the scan? You can use osmedeus health command to check if the install is okay or not. Sometimes error show up mean some of the tools require token to run like github-subdomains but you can ignore it since I already catch the error Where I can get a live support? You can Join Discord Server here to see if anyone can help I have an awesome idea, How can I implement it in Osmedeus? You can Join Discord Server here or contact me via here to see if it worth to add. I ran the scan but there's no vulnerability found? It's simply that there's no vulnerability. It very depends on your target. How can I update my premium package? Just run the install script for premium package again and it will be updated. Why was my scan stuck at portscan? It will stay there because it got a sudo password prompt. Some special tools require root permission to run like nmap . Make sure you allow nmap can be run without sudo password prompt. Why was my scan portscan take so long? It's probably because cloud provider / home network limit your portscan or just simply your input is too big. Try to run with --debug then you can manually check with the raw command that the portscan module actually running. What is the difference between this flow to other flow? Read the flow files to see what difference in them. Seriously, Read the flow files. Remember that you were warned twice about reading read the flow files. Just use diff comparison of each flow file and see what difference field mean here Where should I put my token (Github, Shodan, etc)? All you need to do is follow this guide I found a new tool that pretty awesome. Can you add it in Osmedeus? Yes, just follow this page to added it to your workflow this guide .","title":"Frequently Asked Questions"},{"location":"installation/","text":"Installation \u00b6 Follow this link to see a video instruction Install from a base repository \u00b6 NOTE that you need some essential tools like curl, wget, git, zip, tmux and login as root to start bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh ) \" Install for MacOS (experimental) \u00b6 NOTE that you need to install homebrew first. bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install-macos.sh ) \" Some other changes you might need to make if you're really want to use Osmedeus on MacOS Install from a build release \u00b6 Make sure you login as root otherwise run sudo su first then put build-osm.zip to any folder (e.g: /opt/ ) unzip -q build-osm.zip && cd build-osm ./build.sh # verify your installation with health command osmedeus health Using Docker \u00b6 Pull the Docker image by running docker pull j3ssie/osmedeus and follow this page for in depth usage. Verify the installation process \u00b6 Just run the command osmedeus health . If you see the content like a image below then it's mean the installation process has been success. The installation process is still success if you see this message. It's just one of many Premium features [-] Cloud config setup incorrectly. If you install osmedeus on a single machine then it's okay to ignore the cloud setup","title":"Installation"},{"location":"installation/#installation","text":"Follow this link to see a video instruction","title":" Installation"},{"location":"installation/#install-from-a-base-repository","text":"NOTE that you need some essential tools like curl, wget, git, zip, tmux and login as root to start bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh ) \"","title":" Install from a base repository"},{"location":"installation/#install-for-macos-experimental","text":"NOTE that you need to install homebrew first. bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install-macos.sh ) \" Some other changes you might need to make if you're really want to use Osmedeus on MacOS","title":" Install for MacOS (experimental)"},{"location":"installation/#install-from-a-build-release","text":"Make sure you login as root otherwise run sudo su first then put build-osm.zip to any folder (e.g: /opt/ ) unzip -q build-osm.zip && cd build-osm ./build.sh # verify your installation with health command osmedeus health","title":"Install from a build release"},{"location":"installation/#using-docker","text":"Pull the Docker image by running docker pull j3ssie/osmedeus and follow this page for in depth usage.","title":" Using Docker"},{"location":"installation/#verify-the-installation-process","text":"Just run the command osmedeus health . If you see the content like a image below then it's mean the installation process has been success. The installation process is still success if you see this message. It's just one of many Premium features [-] Cloud config setup incorrectly. If you install osmedeus on a single machine then it's okay to ignore the cloud setup","title":"Verify the installation process"},{"location":"issue/","text":"Common Issues \u00b6 panic: runtime error: invalid memory address or nil pointer dereference #1 when running osmedeus health ? You need to sudo su first before running this command since the setup is done on root user.","title":"Common Issues"},{"location":"issue/#common-issues","text":"panic: runtime error: invalid memory address or nil pointer dereference #1 when running osmedeus health ? You need to sudo su first before running this command since the setup is done on root user.","title":"Common Issues"},{"location":"premium/","text":"What is Premium Package? \u00b6 Premium Package is where you will get the access to exclusive and cutting-edge features. How much does it cost? You can start to join my Patreon starting at 5$ / month to see a private post contains a installation guide for the Premium package You can choose some donation methods here to get the premium package with minimum 5$ What will you get? \u00b6 My private workflow which is fully tested on many site. Wordlists that I collected from many sources for a long time. Private third-party tools made the result a lot more accurate. My Private Jaeles Signatures. My methodology \u00b6 Git Storages natively supported \u00b6 Even though you can use Git Storages by writing your workflow. The premium workflow also comes with the storages script. All you need to do is set up your Gitlab repository . Support Distributed Scan \u00b6","title":"What is Premium Package?"},{"location":"premium/#what-is-premium-package","text":"Premium Package is where you will get the access to exclusive and cutting-edge features. How much does it cost? You can start to join my Patreon starting at 5$ / month to see a private post contains a installation guide for the Premium package You can choose some donation methods here to get the premium package with minimum 5$","title":"What is Premium Package?"},{"location":"premium/#what-will-you-get","text":"My private workflow which is fully tested on many site. Wordlists that I collected from many sources for a long time. Private third-party tools made the result a lot more accurate. My Private Jaeles Signatures.","title":"What will you get?"},{"location":"premium/#my-methodology","text":"","title":"My methodology"},{"location":"premium/#git-storages-natively-supported","text":"Even though you can use Git Storages by writing your workflow. The premium workflow also comes with the storages script. All you need to do is set up your Gitlab repository .","title":"Git Storages natively supported"},{"location":"premium/#support-distributed-scan","text":"","title":"Support Distributed Scan"},{"location":"reference/","text":"Mentions \u00b6 Tool of the week on Bug Bytes #153 [tl;dr sec] #115: Build your own reconnaissance system with Osmedeus Engine","title":"References"},{"location":"reference/#mentions","text":"Tool of the week on Bug Bytes #153 [tl;dr sec] #115: Build your own reconnaissance system with Osmedeus Engine","title":" Mentions"},{"location":"structure/","text":"Detail Structure of the tool \u00b6 Folders that Osmedeus will store data into ( source ) \u00b6 What contains in a Osmedeus release package? \u00b6","title":"Detail Structure of Osmedeus"},{"location":"structure/#detail-structure-of-the-tool","text":"","title":"Detail Structure of the tool"},{"location":"structure/#folders-that-osmedeus-will-store-data-into-source","text":"","title":"Folders that Osmedeus will store data into (source)"},{"location":"structure/#what-contains-in-a-osmedeus-release-package","text":"","title":"What contains in a Osmedeus release package?"},{"location":"workflow/","text":"Understand the workflow \u00b6 Workflow is the core of the Osmedeus Engine which represents your methodology as YAML files. All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work Module contains detail of multiple step. Flow contains multiple module and also define order how to run these modules. Step is smallest part of the Osmedeus routine. Flow \u00b6 name : general desc : run normal routine type : general # this is a folder name that will contains module file validator : domain # validate the input provide from -t option routines : - modules : - subdomain - modules : - probing - modules : - ssame - modules : - screenshot - modules : # these modules will be run in parallel - fingerprint - spider - sto - modules : # these modules will be run in parallel - archive - ipspace - modules : - vulnscan - modules : - vhostscan - modules : - portscan - modules : - pdirbscan - modules : - dirbscan # push final result again - modules : - summary Module \u00b6 subdomain module \u00b6 name : subdomain desc : Scanning for subdomain report : final : - \"{{.Output}}/subdomain/final-{{.Workspace}}.txt\" - \"{{.Output}}/subdomain/more-{{.Workspace}}.txt\" # {{.Output}} == {{.Workspaces}} + {{.Workspace}} but strip \"/\" char pre_run : - CreateFolder(\"{{.Storages}}/subdomain/{{.Workspace}}/\") - CreateFolder(\"{{.Storages}}/summary/{{.Workspace}}/\") - CreateFolder(\"{{.Output}}/subdomain/\") params : - subthreads : \"50\" - amassTimeout : \"3h\" steps : - required : - \"{{.Binaries}}/amass\" - \"{{.Binaries}}/subfinder\" - \"{{.Binaries}}/assetfinder\" - \"{{.Binaries}}/findomain\" commands : - \"timeout -k 1m {{.amassTimeout}} {{.Binaries}}/amass enum -config {{.Data}}/configs/amass.ini -d {{.Target}} -o {{.Output}}/subdomain/{{.Workspace}}-amass.txt > /dev/null 2>&1\" - \"{{.Binaries}}/assetfinder -subs-only {{.Target}} > {{.Output}}/subdomain/{{.Workspace}}-assetfinder.txt\" # these two commands will run in parallels - commands : - \"{{.Binaries}}/findomain -u {{.Output}}/subdomain/{{.Workspace}}-findomain.txt -t {{.Target}} > /dev/null 2>&1\" - \"{{.Binaries}}/subfinder -d {{.Target}} -t {{.subthreads}} -o {{.Output}}/subdomain/{{.Workspace}}-subfinder.txt > /dev/null 2>&1\" # cleaning some result - scripts : - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-amass.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-subfinder.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-assetfinder.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-findomain.txt\") # remove junk subdomain like sample@subdomain.com and 1-2-3.subdomain.com format - ExecCmd(\"cat {{.Output}}/subdomain/sum-{{.Workspace}}.txt | {{.Binaries}}/cleansub -t '{{.Target}}' > {{.Output}}/subdomain/final-{{.Workspace}}.txt\") - scripts : - SortU(\"{{.Output}}/subdomain/final-{{.Workspace}}.txt\") # get more related domains - required : - \"{{.Binaries}}/metabigor\" # assume you run 'osmedeus scan -t example.com' then {{.Org}} == 'example' commands : - \"echo '{{.Org}}' | {{.Binaries}}/metabigor cert --json -o {{.Output}}/subdomain/more-json-{{.Workspace}}.txt\" scripts : - ExecCmd(\"cat {{.Output}}/subdomain/more-json-{{.Workspace}}.txt | jq -r '.Domain' | sed 's/\\*.//g' | sort -u > {{.Output}}/subdomain/more-{{.Workspace}}.txt\") post_run : # delete all files in workspaces folder except a file lists in report section - Cleaning(\"{{.Output}}/subdomain/\") dirbscan module \u00b6 name : dirbscan desc : Run Dirbscan report : final : - \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\" - \"{{.Output}}/directory/paths-{{.Workspace}}.csv\" params : - inputfile : \"{{.Output}}/probing/http-{{.Workspace}}.txt\" - wordlists : \"{{.Data}}/wordlists/content/small.txt\" - lines : \"20\" - fthreads : '20' # threads for single site - dirbThreads : '10' - dlimit : '50000' - recursion : '0' - commitLength : '400' - chan : '#mics' pre_run : - CreateFolder(\"{{.Storages}}/paths/{{.Workspace}}\") - CreateFolder(\"{{.Output}}/directory\") steps : # check if the size is too big, We don't want tons of garbage here - conditions : - \"FileLength('{{.inputfile}}') > {{.dlimit}}\" scripts : - ErrPrintf(\"Filter\", \"Got input file greater than {{.dlimit}} line\") - Exit(1) # # make a header for csv file # - commands: # - echo 'url,status,length,words,lines,redirectlocation' > {{.Output}}/directory/beautify-{{.Workspace}}.csv - required : - \"{{.Binaries}}/ffuf\" - \"{{.inputfile}}\" source : \"{{.inputfile}}\" threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/ffuf -t {{.fthreads}} -timeout 15 -ac -fc '429,403,404' -D -e 'asp,aspx,pl,php,html,htm,jsp,cgi' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : # get result in csv - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}.json | jq -r '.results[] | [.url,.status,.length,.words,.lines,.redirectlocation] | join(\\\",\\\")' > {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv\") # join to final result - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv >> {{.Output}}/directory/beautify-{{.Workspace}}.csv\") # noti small file to telegram - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt\") - TeleMessByFile(\"{{.chan}}\", \"{{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt\") # sorting & clean up - SortU(\"{{.Output}}/directory/beautify-{{.Workspace}}.csv\") - ExecCmd(\"rm -rf {{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv {{.Output}}/directory/raw-{{._id_}}.json {{.Output}}/directory/unique-{{._id_}}.json\") # generate final beautify every 400 domains has been scanned pconditions : - \"({{._id_}} % {{.commitLength}}) == 0\" pscripts : - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.txt >> {{.Storages}}/paths/{{.Workspace}}/beautify-{{.Workspace}}.txt\") - PushFolder(\"{{.Storages}}/paths/\") # clean up and notify to summary channel - required : - \"{{.Output}}/directory/beautify-{{.Workspace}}.csv\" scripts : - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd(\"cat {{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Storages}}/paths/{{.Workspace}}/beautify-{{.Workspace}}.txt\") - TeleMessByFile(\"#dirb\", \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd('cat {{.Output}}/directory/beautify-{{.Workspace}}.txt') post_run : - TotalDirb(\"{{.Output}}/directory/beautify-{{.Workspace}}.txt\") - PushFolder(\"{{.Storages}}/paths/\") Step \u00b6 steps : # all step run in serial # variation 1 - required : # Check if all the files exist or the step will not run - filename-1-here.txt - filename-2-here.txt conditions : # Boolean conditions check with built-in scripts - \"FileLength('filename.txt') > 1000\" commands : # unix command and it will be run in parallel - \"unix command 1 here\" - \"unix command 2 here\" scripts : - ExecCmd(\"unix command 3 heret\") # command 3 and 4 below it will be run in serial - ExecCmd(\"unix command 4 here\") - SortU(\"filename-here.txt\") - TeleMessByFile(\"#dirb\", \"beautify-{{.Workspace}}.txt\") ## only run if conditions is false rcommands : # run in parallel - \"unix command 1 here\" - \"unix command 2 here\" rscripts : - ErrPrintf(\"Filter\", \"Got input file greater than 1000 line\") - Exit(1) ######################### # variation 2 that will run the step but with input is each like of 'source' section - source : \"{{.inputfile}}\" # source file to loop through threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/go/ffuf-mod -H 'X-Forwarded-For: 127.0.0.1' -t {{.fthreads}} -recursion-depth {{.recursion}} -D -e 'asp,aspx,php,html,htm,jsp,cgi' -timeout 15 -get-hash -ac -s -fc '429,404,400' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : - SortU(\"{{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv\")","title":"Understand the Workflow"},{"location":"workflow/#understand-the-workflow","text":"Workflow is the core of the Osmedeus Engine which represents your methodology as YAML files. All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work Module contains detail of multiple step. Flow contains multiple module and also define order how to run these modules. Step is smallest part of the Osmedeus routine.","title":"Understand the workflow"},{"location":"workflow/#flow","text":"name : general desc : run normal routine type : general # this is a folder name that will contains module file validator : domain # validate the input provide from -t option routines : - modules : - subdomain - modules : - probing - modules : - ssame - modules : - screenshot - modules : # these modules will be run in parallel - fingerprint - spider - sto - modules : # these modules will be run in parallel - archive - ipspace - modules : - vulnscan - modules : - vhostscan - modules : - portscan - modules : - pdirbscan - modules : - dirbscan # push final result again - modules : - summary","title":"Flow"},{"location":"workflow/#module","text":"","title":"Module"},{"location":"workflow/#subdomain-module","text":"name : subdomain desc : Scanning for subdomain report : final : - \"{{.Output}}/subdomain/final-{{.Workspace}}.txt\" - \"{{.Output}}/subdomain/more-{{.Workspace}}.txt\" # {{.Output}} == {{.Workspaces}} + {{.Workspace}} but strip \"/\" char pre_run : - CreateFolder(\"{{.Storages}}/subdomain/{{.Workspace}}/\") - CreateFolder(\"{{.Storages}}/summary/{{.Workspace}}/\") - CreateFolder(\"{{.Output}}/subdomain/\") params : - subthreads : \"50\" - amassTimeout : \"3h\" steps : - required : - \"{{.Binaries}}/amass\" - \"{{.Binaries}}/subfinder\" - \"{{.Binaries}}/assetfinder\" - \"{{.Binaries}}/findomain\" commands : - \"timeout -k 1m {{.amassTimeout}} {{.Binaries}}/amass enum -config {{.Data}}/configs/amass.ini -d {{.Target}} -o {{.Output}}/subdomain/{{.Workspace}}-amass.txt > /dev/null 2>&1\" - \"{{.Binaries}}/assetfinder -subs-only {{.Target}} > {{.Output}}/subdomain/{{.Workspace}}-assetfinder.txt\" # these two commands will run in parallels - commands : - \"{{.Binaries}}/findomain -u {{.Output}}/subdomain/{{.Workspace}}-findomain.txt -t {{.Target}} > /dev/null 2>&1\" - \"{{.Binaries}}/subfinder -d {{.Target}} -t {{.subthreads}} -o {{.Output}}/subdomain/{{.Workspace}}-subfinder.txt > /dev/null 2>&1\" # cleaning some result - scripts : - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-amass.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-subfinder.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-assetfinder.txt\") - Append(\"{{.Output}}/subdomain/sum-{{.Workspace}}.txt\", \"{{.Output}}/subdomain/{{.Workspace}}-findomain.txt\") # remove junk subdomain like sample@subdomain.com and 1-2-3.subdomain.com format - ExecCmd(\"cat {{.Output}}/subdomain/sum-{{.Workspace}}.txt | {{.Binaries}}/cleansub -t '{{.Target}}' > {{.Output}}/subdomain/final-{{.Workspace}}.txt\") - scripts : - SortU(\"{{.Output}}/subdomain/final-{{.Workspace}}.txt\") # get more related domains - required : - \"{{.Binaries}}/metabigor\" # assume you run 'osmedeus scan -t example.com' then {{.Org}} == 'example' commands : - \"echo '{{.Org}}' | {{.Binaries}}/metabigor cert --json -o {{.Output}}/subdomain/more-json-{{.Workspace}}.txt\" scripts : - ExecCmd(\"cat {{.Output}}/subdomain/more-json-{{.Workspace}}.txt | jq -r '.Domain' | sed 's/\\*.//g' | sort -u > {{.Output}}/subdomain/more-{{.Workspace}}.txt\") post_run : # delete all files in workspaces folder except a file lists in report section - Cleaning(\"{{.Output}}/subdomain/\")","title":"subdomain module"},{"location":"workflow/#dirbscan-module","text":"name : dirbscan desc : Run Dirbscan report : final : - \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\" - \"{{.Output}}/directory/paths-{{.Workspace}}.csv\" params : - inputfile : \"{{.Output}}/probing/http-{{.Workspace}}.txt\" - wordlists : \"{{.Data}}/wordlists/content/small.txt\" - lines : \"20\" - fthreads : '20' # threads for single site - dirbThreads : '10' - dlimit : '50000' - recursion : '0' - commitLength : '400' - chan : '#mics' pre_run : - CreateFolder(\"{{.Storages}}/paths/{{.Workspace}}\") - CreateFolder(\"{{.Output}}/directory\") steps : # check if the size is too big, We don't want tons of garbage here - conditions : - \"FileLength('{{.inputfile}}') > {{.dlimit}}\" scripts : - ErrPrintf(\"Filter\", \"Got input file greater than {{.dlimit}} line\") - Exit(1) # # make a header for csv file # - commands: # - echo 'url,status,length,words,lines,redirectlocation' > {{.Output}}/directory/beautify-{{.Workspace}}.csv - required : - \"{{.Binaries}}/ffuf\" - \"{{.inputfile}}\" source : \"{{.inputfile}}\" threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/ffuf -t {{.fthreads}} -timeout 15 -ac -fc '429,403,404' -D -e 'asp,aspx,pl,php,html,htm,jsp,cgi' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : # get result in csv - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}.json | jq -r '.results[] | [.url,.status,.length,.words,.lines,.redirectlocation] | join(\\\",\\\")' > {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv\") # join to final result - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv >> {{.Output}}/directory/beautify-{{.Workspace}}.csv\") # noti small file to telegram - ExecCmd(\"cat {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt\") - TeleMessByFile(\"{{.chan}}\", \"{{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt\") # sorting & clean up - SortU(\"{{.Output}}/directory/beautify-{{.Workspace}}.csv\") - ExecCmd(\"rm -rf {{.Output}}/directory/beautify-{{._id_}}-{{.Workspace}}.txt {{.Output}}/directory/raw-{{._id_}}-{{.Workspace}}.csv {{.Output}}/directory/raw-{{._id_}}.json {{.Output}}/directory/unique-{{._id_}}.json\") # generate final beautify every 400 domains has been scanned pconditions : - \"({{._id_}} % {{.commitLength}}) == 0\" pscripts : - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.txt >> {{.Storages}}/paths/{{.Workspace}}/beautify-{{.Workspace}}.txt\") - PushFolder(\"{{.Storages}}/paths/\") # clean up and notify to summary channel - required : - \"{{.Output}}/directory/beautify-{{.Workspace}}.csv\" scripts : - ExecCmd(\"cat {{.Output}}/directory/beautify-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd(\"cat {{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv | {{.Binaries}}/csvtk pretty -I -s ' | ' -W 75 > {{.Storages}}/paths/{{.Workspace}}/beautify-{{.Workspace}}.txt\") - TeleMessByFile(\"#dirb\", \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\") - ExecCmd('cat {{.Output}}/directory/beautify-{{.Workspace}}.txt') post_run : - TotalDirb(\"{{.Output}}/directory/beautify-{{.Workspace}}.txt\") - PushFolder(\"{{.Storages}}/paths/\")","title":"dirbscan module"},{"location":"workflow/#step","text":"steps : # all step run in serial # variation 1 - required : # Check if all the files exist or the step will not run - filename-1-here.txt - filename-2-here.txt conditions : # Boolean conditions check with built-in scripts - \"FileLength('filename.txt') > 1000\" commands : # unix command and it will be run in parallel - \"unix command 1 here\" - \"unix command 2 here\" scripts : - ExecCmd(\"unix command 3 heret\") # command 3 and 4 below it will be run in serial - ExecCmd(\"unix command 4 here\") - SortU(\"filename-here.txt\") - TeleMessByFile(\"#dirb\", \"beautify-{{.Workspace}}.txt\") ## only run if conditions is false rcommands : # run in parallel - \"unix command 1 here\" - \"unix command 2 here\" rscripts : - ErrPrintf(\"Filter\", \"Got input file greater than 1000 line\") - Exit(1) ######################### # variation 2 that will run the step but with input is each like of 'source' section - source : \"{{.inputfile}}\" # source file to loop through threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/go/ffuf-mod -H 'X-Forwarded-For: 127.0.0.1' -t {{.fthreads}} -recursion-depth {{.recursion}} -D -e 'asp,aspx,php,html,htm,jsp,cgi' -timeout 15 -get-hash -ac -s -fc '429,404,400' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : - SortU(\"{{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv\")","title":"Step"},{"location":"installation/install-note/","text":"Installation Notes \u00b6 When install on MacOS \u00b6 Some special tools require root permission to run like nmap . Make sure you allow nmap can be run without sudo password prompt.","title":"Installation Notes"},{"location":"installation/install-note/#installation-notes","text":"","title":"Installation Notes"},{"location":"installation/install-note/#when-install-on-macos","text":"Some special tools require root permission to run like nmap . Make sure you allow nmap can be run without sudo password prompt.","title":"When install on MacOS"},{"location":"installation/token/","text":"Note that this setup is Optional . You can still use the tool perfectly fine without it! You should only store your token in the osm-default.rc file. Modify the ~/.osmedeus/config.yaml will work but you will lose your token when running the config reload. There are some places that tokens will store in Osmedeus below Main token file \u00b6 By default all main tokens will be store at ~/osmedeus-base/token/osm-default.rc There some essential tokens in the token file. - The Github token is needed for github search. - All the TELEGRAM_ is for notification. # Set github token for run github scan export GITHUB_TOKEN = xxx,xxxx # for telegram export TELEGRAM_API_TOKEN = 1111114500 :AAGx ## use this command to get channel ID ## curl 'https://api.telegram.org/bot$TELEGRAM_API_TOKEN/sendMessage?chat_id=@osmpReports&text=hello' export TELEGRAM_CHANNEL = -100XXXXX export TELEGRAM_STATUS_CHANNEL = -100XXXXX export TELEGRAM_REPORT_CHANNEL = -100XXXXX export TELEGRAM_SENSITIVE_CHANNEL = -100XXXXX export TELEGRAM_DIRB_CHANNEL = -100XXXXX export TELEGRAM_MICS_CHANNEL = -100XXXXX After modified the tokens, then run commands below to reload token to the osmedeus config.yaml # or edit file osm-default.rc # add osmedeus-base/token/osm-default.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/osm-default.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload Amass config \u00b6 By Default Amass config will be store at ~/osmedeus-base/data/configs/amass.ini Notification \u00b6 Note that this setup is Optional . You can still use the tool perfectly fine without it! Notification with Telegram \u00b6 Follow this guide to generate your API token and put it to the ~/osmedeus-base/token/osm-default.rc . Then reload your config with the command osmedeus config reload to load the API key. You can now using Notification Scripts in your Workflow. You can search TeleMessByFile script in the workflow which will send the message as the content of a file to a specific channel. # Content of the file `~/osmedeus-base/token/osm-default.rc` is represent for specific channel name as below export TELEGRAM_CHANNEL=-100XXXXX --> #general export TELEGRAM_STATUS_CHANNEL=-100XXXXX --> #status export TELEGRAM_REPORT_CHANNEL=-100XXXXX --> #report export TELEGRAM_SENSITIVE_CHANNEL=-100XXXXX --> #sensitive export TELEGRAM_DIRB_CHANNEL=-100XXXXX --> #dirb export TELEGRAM_MICS_CHANNEL=-100XXXXX --> #mics # this will send the file '{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt' to the channel TELEGRAM_SENSITIVE_CHANNEL above - TeleMessByFile(\"#sensitive\", \"{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt\") # this will send the file 'Start the scan {{.Target}}' to the channel TELEGRAM_MICS_CHANNEL above - TeleMess(\"#mics\", \"Start the scan {{.Target}}\")","title":"Setup Token & API Key"},{"location":"installation/token/#main-token-file","text":"By default all main tokens will be store at ~/osmedeus-base/token/osm-default.rc There some essential tokens in the token file. - The Github token is needed for github search. - All the TELEGRAM_ is for notification. # Set github token for run github scan export GITHUB_TOKEN = xxx,xxxx # for telegram export TELEGRAM_API_TOKEN = 1111114500 :AAGx ## use this command to get channel ID ## curl 'https://api.telegram.org/bot$TELEGRAM_API_TOKEN/sendMessage?chat_id=@osmpReports&text=hello' export TELEGRAM_CHANNEL = -100XXXXX export TELEGRAM_STATUS_CHANNEL = -100XXXXX export TELEGRAM_REPORT_CHANNEL = -100XXXXX export TELEGRAM_SENSITIVE_CHANNEL = -100XXXXX export TELEGRAM_DIRB_CHANNEL = -100XXXXX export TELEGRAM_MICS_CHANNEL = -100XXXXX After modified the tokens, then run commands below to reload token to the osmedeus config.yaml # or edit file osm-default.rc # add osmedeus-base/token/osm-default.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/osm-default.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload","title":"Main token file"},{"location":"installation/token/#amass-config","text":"By Default Amass config will be store at ~/osmedeus-base/data/configs/amass.ini","title":"Amass config"},{"location":"installation/token/#notification","text":"Note that this setup is Optional . You can still use the tool perfectly fine without it!","title":"Notification"},{"location":"installation/token/#notification-with-telegram","text":"Follow this guide to generate your API token and put it to the ~/osmedeus-base/token/osm-default.rc . Then reload your config with the command osmedeus config reload to load the API key. You can now using Notification Scripts in your Workflow. You can search TeleMessByFile script in the workflow which will send the message as the content of a file to a specific channel. # Content of the file `~/osmedeus-base/token/osm-default.rc` is represent for specific channel name as below export TELEGRAM_CHANNEL=-100XXXXX --> #general export TELEGRAM_STATUS_CHANNEL=-100XXXXX --> #status export TELEGRAM_REPORT_CHANNEL=-100XXXXX --> #report export TELEGRAM_SENSITIVE_CHANNEL=-100XXXXX --> #sensitive export TELEGRAM_DIRB_CHANNEL=-100XXXXX --> #dirb export TELEGRAM_MICS_CHANNEL=-100XXXXX --> #mics # this will send the file '{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt' to the channel TELEGRAM_SENSITIVE_CHANNEL above - TeleMessByFile(\"#sensitive\", \"{{.Output}}/vuln/sensitive/sensitivescan-{{.Workspace}}-{{.TS}}.txt\") # this will send the file 'Start the scan {{.Target}}' to the channel TELEGRAM_MICS_CHANNEL above - TeleMess(\"#mics\", \"Start the scan {{.Target}}\")","title":"Notification with Telegram"},{"location":"installation/usage/","text":"Usage \u00b6 Practical Usage with examples commands \u00b6 # Practical Usage: osmedeus scan -f [ flowName ] -t [ target ] osmedeus scan -f [ flowName ] -T [ targetsFile ] osmedeus scan -f /path/to/flow.yaml -t [ target ] osmedeus scan -m /path/to/module.yaml -t [ target ] --params 'port=9200' osmedeus scan -m /path/to/module.yaml -t [ target ] -l /tmp/log.log cat targets | osmedeus scan -f sample # Cloud Usage: osmedeus provider build osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] # Example Commands: osmedeus scan -t target.com osmedeus scan -T list_of_targets.txt -W custom_workspaces osmedeus scan -t target.com -w workspace_name --debug osmedeus scan -f single -t www.sample.com osmedeus scan -f ovuln-T list_of_target.txt osmedeus scan -m ~/osmedeus-base/workflow/direct-module/dirbscan.yaml -t http-file.txt ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/busting.yaml -D # Private Documentation can be found here: https://frosty-minsky-779bed.netlify.app/introduction/ # Start Web UI at https://localhost:8000/ui/ osmedeus server # login with credentials from `~/.osmedeus/config.yaml` # Delete workspace osmedeus config delete -w workspace_name help - help about any command \u00b6 osmedeus help osmedeus scan help scan - Actually start a scan based on predefined workflow \u00b6 # Practical Scan Usage: ## Start a simple scan with default 'general' flow osmedeus scan -t sample.com ## Start a scan directly with a module with inputs as a list of http domains like this https://sub.example.com osmedeus scan -m ~/osmedeus-base/workflow/direct-module/dirbscan.yaml -t http-file.txt ## Start a general scan but exclude some of the modules osmedeus scan -t sample.com -x screenshot -x spider ## Start a simple scan with other flow osmedeus scan -f vuln -t sample.com ## Scan for CIDR with file contains CIDR with the format '1.2.3.4/24' osmedeus scan -f cidr -t list-of-cidrs.txt osmedeus scan -f cidr -t '1.2.3.4/24' # this will auto convert the single input to the file and run ## Directly run the vuln scan and directory scan on list of domains osmedeus scan -f vuln-and-dirb -t list-of-domains.txt ## Directly run the general but without subdomain enumeration scan on list of domains osmedeus scan -f domains -t list-of-domains.txt ## Use a custom wordlist osmedeus scan -t sample.com -p 'wordlists={{.Data}}/wordlists/content/big.txt' -p 'fthreads=40' ## Scan list of targets osmedeus scan -T list_of_targets.txt ## Get target from a stdin and start the scan with 2 concurrency cat list_of_targets.txt | osmedeus scan -c 2 server - Start web UI server \u00b6 osmedeus server --port 9000 utils - Utility to get some information from the system \u00b6 osmedeus utils tmux ls osmedeus utils tmux logs -A -l 10 osmedeus utils ps osmedeus utils ps --proc 'jaeles' osmedeus utils cron --cmd 'osmdeus scan -t example.com' --sch 60 osmedeus utils cron --for --cmd 'osmedeus scan -t example.com' health - Run diagnostics to check configurations \u00b6 osmedeus health osmedeus health cloud --debug osmedeus health git --debug cloud - Run scan in Distributed Cloud mode \u00b6 # Cloud Usage osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -m [ modulePath ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --token xxx -G -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] provider - Cloud utils for Distributed Mode \u00b6 # Provider Usage osmedeus provider wizard osmedeus provider validate osmedeus provider build --token xxx --rebuild --ic osmedeus provider create --name 'sample' osmedeus provider health --debug osmedeus provider list osmedeus provider delete --id 34317111 --id 34317112","title":"Usage"},{"location":"installation/usage/#usage","text":"","title":"Usage"},{"location":"installation/usage/#practical-usage-with-examples-commands","text":"# Practical Usage: osmedeus scan -f [ flowName ] -t [ target ] osmedeus scan -f [ flowName ] -T [ targetsFile ] osmedeus scan -f /path/to/flow.yaml -t [ target ] osmedeus scan -m /path/to/module.yaml -t [ target ] --params 'port=9200' osmedeus scan -m /path/to/module.yaml -t [ target ] -l /tmp/log.log cat targets | osmedeus scan -f sample # Cloud Usage: osmedeus provider build osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] # Example Commands: osmedeus scan -t target.com osmedeus scan -T list_of_targets.txt -W custom_workspaces osmedeus scan -t target.com -w workspace_name --debug osmedeus scan -f single -t www.sample.com osmedeus scan -f ovuln-T list_of_target.txt osmedeus scan -m ~/osmedeus-base/workflow/direct-module/dirbscan.yaml -t http-file.txt ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/busting.yaml -D # Private Documentation can be found here: https://frosty-minsky-779bed.netlify.app/introduction/ # Start Web UI at https://localhost:8000/ui/ osmedeus server # login with credentials from `~/.osmedeus/config.yaml` # Delete workspace osmedeus config delete -w workspace_name","title":"Practical Usage with examples commands"},{"location":"installation/usage/#help-help-about-any-command","text":"osmedeus help osmedeus scan help","title":"help - help about any command"},{"location":"installation/usage/#scan-actually-start-a-scan-based-on-predefined-workflow","text":"# Practical Scan Usage: ## Start a simple scan with default 'general' flow osmedeus scan -t sample.com ## Start a scan directly with a module with inputs as a list of http domains like this https://sub.example.com osmedeus scan -m ~/osmedeus-base/workflow/direct-module/dirbscan.yaml -t http-file.txt ## Start a general scan but exclude some of the modules osmedeus scan -t sample.com -x screenshot -x spider ## Start a simple scan with other flow osmedeus scan -f vuln -t sample.com ## Scan for CIDR with file contains CIDR with the format '1.2.3.4/24' osmedeus scan -f cidr -t list-of-cidrs.txt osmedeus scan -f cidr -t '1.2.3.4/24' # this will auto convert the single input to the file and run ## Directly run the vuln scan and directory scan on list of domains osmedeus scan -f vuln-and-dirb -t list-of-domains.txt ## Directly run the general but without subdomain enumeration scan on list of domains osmedeus scan -f domains -t list-of-domains.txt ## Use a custom wordlist osmedeus scan -t sample.com -p 'wordlists={{.Data}}/wordlists/content/big.txt' -p 'fthreads=40' ## Scan list of targets osmedeus scan -T list_of_targets.txt ## Get target from a stdin and start the scan with 2 concurrency cat list_of_targets.txt | osmedeus scan -c 2","title":"scan - Actually start a scan based on predefined workflow"},{"location":"installation/usage/#server-start-web-ui-server","text":"osmedeus server --port 9000","title":"server - Start web UI server"},{"location":"installation/usage/#utils-utility-to-get-some-information-from-the-system","text":"osmedeus utils tmux ls osmedeus utils tmux logs -A -l 10 osmedeus utils ps osmedeus utils ps --proc 'jaeles' osmedeus utils cron --cmd 'osmdeus scan -t example.com' --sch 60 osmedeus utils cron --for --cmd 'osmedeus scan -t example.com'","title":"utils - Utility to get some information from the system"},{"location":"installation/usage/#health-run-diagnostics-to-check-configurations","text":"osmedeus health osmedeus health cloud --debug osmedeus health git --debug","title":"health - Run diagnostics to check configurations"},{"location":"installation/usage/#cloud-run-scan-in-distributed-cloud-mode","text":"# Cloud Usage osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -m [ modulePath ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --token xxx -G -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ]","title":"cloud - Run scan in Distributed Cloud mode"},{"location":"installation/usage/#provider-cloud-utils-for-distributed-mode","text":"# Provider Usage osmedeus provider wizard osmedeus provider validate osmedeus provider build --token xxx --rebuild --ic osmedeus provider create --name 'sample' osmedeus provider health --debug osmedeus provider list osmedeus provider delete --id 34317111 --id 34317112","title":"provider - Cloud utils for Distributed Mode"},{"location":"installation/using-docker/","text":"Using Docker \u00b6 Building docker image \u00b6 How to Build docker file for the premium package? Just change the https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh in Dockerfile to the install URL that I gave you. git clone --depth = 1 git@github.com:osmedeus/osmedeus-base.git cd osmedeus-base/ docker build -t j3ssie/osmedeus:latest . Running the scan \u00b6 # create a volume with name `osmws` first, if you want to keep workspace data docker volume create osmws # run the scan docker run -it --rm -v osmws:/root/.osmedeus/workspaces j3ssie/osmedeus:latest scan -f fast -t sample.com # access the docker via bash if you want to see a raw result of the previous or current scan docker ps docker exec -it <container-id> /bin/bash Run the Web UI \u00b6 Note that osmedeus-scanner is just the name, you can use anything you want ## Start the web server docker run -d --name osmedeus-scanner -v osmws:/root/.osmedeus/workspaces -p 8000 :8000 j3ssie/osmedeus:latest server ## grepping for password docker exec -it osmedeus-scanner -v osmws:/root/.osmedeus/workspaces grep password /root/.osmedeus/config.yaml | head -1","title":"Using Docker"},{"location":"installation/using-docker/#using-docker","text":"","title":" Using Docker"},{"location":"installation/using-docker/#building-docker-image","text":"How to Build docker file for the premium package? Just change the https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh in Dockerfile to the install URL that I gave you. git clone --depth = 1 git@github.com:osmedeus/osmedeus-base.git cd osmedeus-base/ docker build -t j3ssie/osmedeus:latest .","title":"Building docker image"},{"location":"installation/using-docker/#running-the-scan","text":"# create a volume with name `osmws` first, if you want to keep workspace data docker volume create osmws # run the scan docker run -it --rm -v osmws:/root/.osmedeus/workspaces j3ssie/osmedeus:latest scan -f fast -t sample.com # access the docker via bash if you want to see a raw result of the previous or current scan docker ps docker exec -it <container-id> /bin/bash","title":"Running the scan"},{"location":"installation/using-docker/#run-the-web-ui","text":"Note that osmedeus-scanner is just the name, you can use anything you want ## Start the web server docker run -d --name osmedeus-scanner -v osmws:/root/.osmedeus/workspaces -p 8000 :8000 j3ssie/osmedeus:latest server ## grepping for password docker exec -it osmedeus-scanner -v osmws:/root/.osmedeus/workspaces grep password /root/.osmedeus/config.yaml | head -1","title":"Run the Web UI"},{"location":"installation/web-ui/","text":"Web UI (Experimental) \u00b6 Start a web server \u00b6 Open a new terminal or tmux and run osmedeus server The server will be avaliable at HTTPS URL here: https://your-vps-ip:8000/ui/ Then get the credentials from this file. cat ~/.osmedeus/config.yaml ... client: password: xxxx username: osmedeus ... View results in your workspace via static path \u00b6 NOTE that this static path doesn't require authentication. Be careful when you exposed this prefix to other people. By default, the webserver will allow you to view your workspace folder as a static file via the endpoints /random-prefix-here/workspaces/ . You can see the detail below. cat ~/.osmedeus/config.yaml server: ... prefix: random-prefix-here ... curl -k https://your-webserver:8000/random-prefix-here/workspaces/sample.com/subdomain/final-sample.com.txt","title":"Web UI (Experimental)"},{"location":"installation/web-ui/#web-ui-experimental","text":"","title":" Web UI (Experimental)"},{"location":"installation/web-ui/#start-a-web-server","text":"Open a new terminal or tmux and run osmedeus server The server will be avaliable at HTTPS URL here: https://your-vps-ip:8000/ui/ Then get the credentials from this file. cat ~/.osmedeus/config.yaml ... client: password: xxxx username: osmedeus ...","title":"Start a web server"},{"location":"installation/web-ui/#view-results-in-your-workspace-via-static-path","text":"NOTE that this static path doesn't require authentication. Be careful when you exposed this prefix to other people. By default, the webserver will allow you to view your workspace folder as a static file via the endpoints /random-prefix-here/workspaces/ . You can see the detail below. cat ~/.osmedeus/config.yaml server: ... prefix: random-prefix-here ... curl -k https://your-webserver:8000/random-prefix-here/workspaces/sample.com/subdomain/final-sample.com.txt","title":"View results in your workspace via static path"},{"location":"premium/cloud-setup/","text":"Cloud config for distributed scan \u00b6 This is only available in the premium package Here is how the scan looks like \u00b6 Setup with the wizard \u00b6 Just run osmedeus provider wizard then fill your API keys, press enter to use default value. You can also do some other actions to your provider with osmedeus provider command Manual Setup \u00b6 1. Create API Key denpend on your cloud provider \u00b6 First of all, you will need your token store in ~/osmedeus-base/cloud/provider.yaml as the format below. Currently, Osmedeus only support Digital Ocean and Linode provider. 2. Create both public and private SSH Key \u00b6 # This will auto generate the SSH Key if it not found it yet osmedeus health cloud --debug 3. Create a snapshot with the build command \u00b6 This will need packer v1.7.8 installed on your machine. osmedeus provider build --rebuild # or enable debug mode to see what's going on osmedeus provider build --rebuild --debug the result of the command should look like this If you have any error make sure to check the content of these first your api key is in ~/osmedeus-base/cloud/provider.yaml . run osmedeus config reload to make sure everything loaded. ls /root/osmedeus-base/cloud/ssh/cloud have two SSH Keys. packer v1.7.8 is ready on your host machine.","title":"Setup for Distributed Scan"},{"location":"premium/cloud-setup/#cloud-config-for-distributed-scan","text":"This is only available in the premium package","title":"Cloud config for distributed scan"},{"location":"premium/cloud-setup/#here-is-how-the-scan-looks-like","text":"","title":"Here is how the scan looks like"},{"location":"premium/cloud-setup/#setup-with-the-wizard","text":"Just run osmedeus provider wizard then fill your API keys, press enter to use default value. You can also do some other actions to your provider with osmedeus provider command","title":"Setup with the wizard"},{"location":"premium/cloud-setup/#manual-setup","text":"","title":"Manual Setup"},{"location":"premium/cloud-setup/#1-create-api-key-denpend-on-your-cloud-provider","text":"First of all, you will need your token store in ~/osmedeus-base/cloud/provider.yaml as the format below. Currently, Osmedeus only support Digital Ocean and Linode provider.","title":"1. Create API Key denpend on your cloud provider"},{"location":"premium/cloud-setup/#2-create-both-public-and-private-ssh-key","text":"# This will auto generate the SSH Key if it not found it yet osmedeus health cloud --debug","title":"2. Create both public and private SSH Key"},{"location":"premium/cloud-setup/#3-create-a-snapshot-with-the-build-command","text":"This will need packer v1.7.8 installed on your machine. osmedeus provider build --rebuild # or enable debug mode to see what's going on osmedeus provider build --rebuild --debug the result of the command should look like this If you have any error make sure to check the content of these first your api key is in ~/osmedeus-base/cloud/provider.yaml . run osmedeus config reload to make sure everything loaded. ls /root/osmedeus-base/cloud/ssh/cloud have two SSH Keys. packer v1.7.8 is ready on your host machine.","title":"3. Create a snapshot with the build command"},{"location":"premium/git-setup/","text":"Git Setup for Premium Package \u00b6 This feature is quite complex and only available in the premium package. Make sure you understand to tools and its concept of it first Note that this setup is Optional . You can still use the tool perfectly fine without it! Setup Storages \u00b6 Check out the Private Playlist on the #backer channel in Discord to see a Video Instruction. 1. Modify the content of Storages Config file at ~/osmedeus-base/token/storages-alias.rc \u00b6 Please change your username and repository name from not-j3ssie is your gitlab username and your-osmd-summary is your Gitlab repo name. export ENABLE_GIT_STORAGES = TRUE export GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no -i ~/.osmedeus/storages_key' # for storages export SECRET_KEY = ~/.osmedeus/storages_key # core one export SUMMARY_REPO = git@gitlab.com:your_gitlab_username/dosm-summary export VULN_REPO = git@gitlab.com:your_gitlab_username/dosm-vuln export PATHS_REPO = git@gitlab.com:your_gitlab_username/dosm-paths export HTTP_REPO = git@gitlab.com:your_gitlab_username/dosm-http # mics one export ASSETS_REPO = git@gitlab.com:your_gitlab_username/dosm-assets export PORTS_REPO = git@gitlab.com:your_gitlab_username/dosm-ports export MICS_REPO = git@gitlab.com:your_gitlab_username/dosm-cloud export SUBDOMAIN_REPO = git@gitlab.com:your_gitlab_username/dosm-subdomain 2. Load the storages variables to Osmedeus config \u00b6 Run these commands below if you not using git before git config --global user.name \"your_gitlab_user\" git config --global user.email \"your_gitlab_uid@users.noreply.gitlab.com\" echo 'source $HOME/osmedeus-base/token/storages-alias.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload This will generate the public key at /root/.osmedeus/storages_key.pub . Please add this public key at to your gitlab profile. You can also check if the config was loaded or not cat ~/.osmedeus/config.yaml | grep 'secret_key' 3. Reload the config to clone repo \u00b6 #reload config to cloning the repo osmedeus config reload --debug # then check out your storages folder at `~/.osmedeus/storages/summary` ls ~/.osmedeus/storages/summary/","title":"Git Setup for Premium Package"},{"location":"premium/git-setup/#git-setup-for-premium-package","text":"This feature is quite complex and only available in the premium package. Make sure you understand to tools and its concept of it first Note that this setup is Optional . You can still use the tool perfectly fine without it!","title":"Git Setup for Premium Package"},{"location":"premium/git-setup/#setup-storages","text":"Check out the Private Playlist on the #backer channel in Discord to see a Video Instruction.","title":"Setup Storages"},{"location":"premium/git-setup/#1-modify-the-content-of-storages-config-file-at-osmedeus-basetokenstorages-aliasrc","text":"Please change your username and repository name from not-j3ssie is your gitlab username and your-osmd-summary is your Gitlab repo name. export ENABLE_GIT_STORAGES = TRUE export GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no -i ~/.osmedeus/storages_key' # for storages export SECRET_KEY = ~/.osmedeus/storages_key # core one export SUMMARY_REPO = git@gitlab.com:your_gitlab_username/dosm-summary export VULN_REPO = git@gitlab.com:your_gitlab_username/dosm-vuln export PATHS_REPO = git@gitlab.com:your_gitlab_username/dosm-paths export HTTP_REPO = git@gitlab.com:your_gitlab_username/dosm-http # mics one export ASSETS_REPO = git@gitlab.com:your_gitlab_username/dosm-assets export PORTS_REPO = git@gitlab.com:your_gitlab_username/dosm-ports export MICS_REPO = git@gitlab.com:your_gitlab_username/dosm-cloud export SUBDOMAIN_REPO = git@gitlab.com:your_gitlab_username/dosm-subdomain","title":"1. Modify the content of Storages Config file at ~/osmedeus-base/token/storages-alias.rc"},{"location":"premium/git-setup/#2-load-the-storages-variables-to-osmedeus-config","text":"Run these commands below if you not using git before git config --global user.name \"your_gitlab_user\" git config --global user.email \"your_gitlab_uid@users.noreply.gitlab.com\" echo 'source $HOME/osmedeus-base/token/storages-alias.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload This will generate the public key at /root/.osmedeus/storages_key.pub . Please add this public key at to your gitlab profile. You can also check if the config was loaded or not cat ~/.osmedeus/config.yaml | grep 'secret_key'","title":"2. Load the storages variables to Osmedeus config"},{"location":"premium/git-setup/#3-reload-the-config-to-clone-repo","text":"#reload config to cloning the repo osmedeus config reload --debug # then check out your storages folder at `~/.osmedeus/storages/summary` ls ~/.osmedeus/storages/summary/","title":"3. Reload the config to clone repo"},{"location":"premium/install-premium-package/","text":"How to Install the Premium Package? \u00b6 It's very simple. Once your donation is completed. Send me an DM on Discord or Twitter then you will be invited to the exclusive Discord Channel and get an one-liner to install it. What does the install script actually do? \u00b6","title":"How to Install the Premium Package?"},{"location":"premium/install-premium-package/#how-to-install-the-premium-package","text":"It's very simple. Once your donation is completed. Send me an DM on Discord or Twitter then you will be invited to the exclusive Discord Channel and get an one-liner to install it.","title":"How to Install the Premium Package?"},{"location":"premium/install-premium-package/#what-does-the-install-script-actually-do","text":"","title":"What does the install script actually do?"},{"location":"workflow/customize-your-own-workflow/","text":"Customize your own workflow \u00b6 All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work After the installation process is finished, your workflow will be stored at ~/osmedeus-base/workflow . 1. Tweaking commands or threads of the tool depends on your machine specification \u00b6 You can start tweaking the workflow right away by edit any command in module file at ~/osmedeus-base/workflow/general/ folder. For example you can edit the thread of ffuf command here on dirbscan module You can also use the force-params: true in flow file to override the threads in module file like this flow 2. Fork another one from community workflow \u00b6 Fork this repo from here https://github.com/osmedeus/osmedeus-workflow and change anything you want and put it to ~/osmedeus-base/workflow folder. or you can put it in a custom folder then use this command. osmedeus scan --wfFolder ~/custom-workflow/ -f your-custom-workflow -t sample.com 3. Writing a new flow \u00b6 Create a new flow file at ~/osmedeus-base/workflow/your-workflow.yaml and folder you-workflow to store your modules file name : your-workflow desc : run normal routine type : you-workflow validator : domain routines : - modules : - your-module-here","title":"Write Your Own Workflow"},{"location":"workflow/customize-your-own-workflow/#customize-your-own-workflow","text":"All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work After the installation process is finished, your workflow will be stored at ~/osmedeus-base/workflow .","title":"Customize your own workflow"},{"location":"workflow/customize-your-own-workflow/#1-tweaking-commands-or-threads-of-the-tool-depends-on-your-machine-specification","text":"You can start tweaking the workflow right away by edit any command in module file at ~/osmedeus-base/workflow/general/ folder. For example you can edit the thread of ffuf command here on dirbscan module You can also use the force-params: true in flow file to override the threads in module file like this flow","title":"1. Tweaking commands or threads of the tool depends on your machine specification"},{"location":"workflow/customize-your-own-workflow/#2-fork-another-one-from-community-workflow","text":"Fork this repo from here https://github.com/osmedeus/osmedeus-workflow and change anything you want and put it to ~/osmedeus-base/workflow folder. or you can put it in a custom folder then use this command. osmedeus scan --wfFolder ~/custom-workflow/ -f your-custom-workflow -t sample.com","title":"2. Fork another one from community workflow"},{"location":"workflow/customize-your-own-workflow/#3-writing-a-new-flow","text":"Create a new flow file at ~/osmedeus-base/workflow/your-workflow.yaml and folder you-workflow to store your modules file name : your-workflow desc : run normal routine type : you-workflow validator : domain routines : - modules : - your-module-here","title":"3. Writing a new flow"},{"location":"workflow/default-workflow/","text":"Default Community workflow \u00b6 Anatomy of Public Community methodology \u00b6 List all flow available \u00b6 $ osmedeus scan -f [ flow-name ] -t example.com general - run normal routine # default workflow cidr - Scan for CIDR File domains - run normal routine but without subdomain scan extensive - run extensive routine with more in -depth module fast - run fast routine gently-extensive - run extensive routine but with very low threads gently-general - run normal routine but with very low threads quick-cidr - Scan for CIDR File but focus on common HTTP Ports sync - Sync result based on git test - testing workflow urls - Scan for List of URLs vuln-and-dirb - directly run on vuln scan and directory scan on list of domains vuln - run fast routine with vuln scan","title":"Default Community workflow"},{"location":"workflow/default-workflow/#default-community-workflow","text":"","title":"Default Community workflow"},{"location":"workflow/default-workflow/#anatomy-of-public-community-methodology","text":"","title":"Anatomy of Public Community methodology"},{"location":"workflow/default-workflow/#list-all-flow-available","text":"$ osmedeus scan -f [ flow-name ] -t example.com general - run normal routine # default workflow cidr - Scan for CIDR File domains - run normal routine but without subdomain scan extensive - run extensive routine with more in -depth module fast - run fast routine gently-extensive - run extensive routine but with very low threads gently-general - run normal routine but with very low threads quick-cidr - Scan for CIDR File but focus on common HTTP Ports sync - Sync result based on git test - testing workflow urls - Scan for List of URLs vuln-and-dirb - directly run on vuln scan and directory scan on list of domains vuln - run fast routine with vuln scan","title":"List all flow available"},{"location":"workflow/git-scripts/","text":"Git Scripts \u00b6 const ( RRSync = \"RRSync\" Clone = \"Clone\" FClone = \"FClone\" PushResult = \"PushResult\" PushFolder = \"PushFolder\" PullFolder = \"PullFolder\" DiffCompare = \"DiffCompare\" GitDiff = \"GitDiff\" LoopGitDiff = \"LoopGitDiff\" GetFileFromCDN = \"GetFileFromCDN\" GetWSFromCDN = \"GetWSFromCDN\" DownloadFile = \"DownloadFile\" // for gitlab API only CreateRepo = \"CreateRepo\" DeleteRepo = \"DeleteRepo\" DeleteRepoByPid = \"DeleteRepoByPid\" ListProjects = \"ListProjects\" )","title":"Git Scripts"},{"location":"workflow/git-scripts/#git-scripts","text":"const ( RRSync = \"RRSync\" Clone = \"Clone\" FClone = \"FClone\" PushResult = \"PushResult\" PushFolder = \"PushFolder\" PullFolder = \"PullFolder\" DiffCompare = \"DiffCompare\" GitDiff = \"GitDiff\" LoopGitDiff = \"LoopGitDiff\" GetFileFromCDN = \"GetFileFromCDN\" GetWSFromCDN = \"GetWSFromCDN\" DownloadFile = \"DownloadFile\" // for gitlab API only CreateRepo = \"CreateRepo\" DeleteRepo = \"DeleteRepo\" DeleteRepoByPid = \"DeleteRepoByPid\" ListProjects = \"ListProjects\" )","title":"Git Scripts"},{"location":"workflow/io-utils/","text":"I/O Scripts \u00b6 const ( SortU = \"SortU\" SplitFile = \"SplitFile\" Append = \"Append\" Copy = \"Copy\" CreateFolder = \"CreateFolder\" DeleteFile = \"DeleteFile\" DeleteFolder = \"DeleteFolder\" SplitFileByPart = \"SplitFileByPart\" FileLength = \"FileLength\" IsFile = \"IsFile\" EmptyDir = \"EmptyDir\" EmptyFile = \"EmptyFile\" ReadLines = \"ReadLines\" )","title":"IO Scripts"},{"location":"workflow/io-utils/#io-scripts","text":"const ( SortU = \"SortU\" SplitFile = \"SplitFile\" Append = \"Append\" Copy = \"Copy\" CreateFolder = \"CreateFolder\" DeleteFile = \"DeleteFile\" DeleteFolder = \"DeleteFolder\" SplitFileByPart = \"SplitFileByPart\" FileLength = \"FileLength\" IsFile = \"IsFile\" EmptyDir = \"EmptyDir\" EmptyFile = \"EmptyFile\" ReadLines = \"ReadLines\" )","title":"I/O Scripts"},{"location":"workflow/noti-scripts/","text":"Noti Scripts \u00b6 const ( // noti for slack StartNoti = \"StartNoti\" DoneNoti = \"DoneNoti\" ReportNoti = \"ReportNoti\" DiffNoti = \"DiffNoti\" CustomNoti = \"CustomNoti\" NotiFile = \"NotiFile\" WebHookNoti = \"WebHookNoti\" // noti for telegram TeleMess = \"TeleMess\" TeleMessWrap = \"TeleMessWrap\" TeleMessByFile = \"TeleMessByFile\" TeleSendFile = \"TeleSendFile\" )","title":"Notification Scripts"},{"location":"workflow/noti-scripts/#noti-scripts","text":"const ( // noti for slack StartNoti = \"StartNoti\" DoneNoti = \"DoneNoti\" ReportNoti = \"ReportNoti\" DiffNoti = \"DiffNoti\" CustomNoti = \"CustomNoti\" NotiFile = \"NotiFile\" WebHookNoti = \"WebHookNoti\" // noti for telegram TeleMess = \"TeleMess\" TeleMessWrap = \"TeleMessWrap\" TeleMessByFile = \"TeleMessByFile\" TeleSendFile = \"TeleSendFile\" )","title":"Noti Scripts"},{"location":"workflow/other-fields/","text":"Other Fields \u00b6 Type & Flow \u00b6 Type tag (Only avaliable flow file) is a folder name that will contains module file. For example if you run the scan osmedeus scan -f general -t example.com with module like below. It will look for module file general/subdomain.yaml and general/probing.yaml to run. name : general desc : run normal routine type : general validator : domain routines : - modules : - subdomain - modules : - probing - flow : 'slow' # override the type: general to look for module name slow/portscan.yaml modules : - portscan Validator \u00b6 The validator tag allows you to check the format of the input first before actually running the scan. validator : domain # -t example.com # or validator : cidr-file # -t file-of-cidr.txt Here are some built-in formats that available in the Engine domain url ipv4 cidr you can also add -file after each name to validate input as a file (e.g: cidr-file ). Reports \u00b6 This field shows a list of files that will show up on the Web UI modules. Also when call the cleaning script like Cleaning(\"{{.Output}}/subdomain/\") . It will delete all the things in the subdomain folder except the file in the report section. When you're using --resume flag. This is also the file that the core engine check if the module is already run or not too. name : dirbscan desc : Run Dirbscan report : final : - \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\" - \"{{.Output}}/directory/paths-{{.Workspace}}.csv\" params : - inputfile : \"{{.Output}}/probing/http-{{.Workspace}}.txt\" - wordlists : \"{{.Data}}/wordlists/content/small.txt\"","title":"Other Fields"},{"location":"workflow/other-fields/#other-fields","text":"","title":" Other Fields"},{"location":"workflow/other-fields/#type-flow","text":"Type tag (Only avaliable flow file) is a folder name that will contains module file. For example if you run the scan osmedeus scan -f general -t example.com with module like below. It will look for module file general/subdomain.yaml and general/probing.yaml to run. name : general desc : run normal routine type : general validator : domain routines : - modules : - subdomain - modules : - probing - flow : 'slow' # override the type: general to look for module name slow/portscan.yaml modules : - portscan","title":"Type &amp; Flow"},{"location":"workflow/other-fields/#validator","text":"The validator tag allows you to check the format of the input first before actually running the scan. validator : domain # -t example.com # or validator : cidr-file # -t file-of-cidr.txt Here are some built-in formats that available in the Engine domain url ipv4 cidr you can also add -file after each name to validate input as a file (e.g: cidr-file ).","title":"Validator"},{"location":"workflow/other-fields/#reports","text":"This field shows a list of files that will show up on the Web UI modules. Also when call the cleaning script like Cleaning(\"{{.Output}}/subdomain/\") . It will delete all the things in the subdomain folder except the file in the report section. When you're using --resume flag. This is also the file that the core engine check if the module is already run or not too. name : dirbscan desc : Run Dirbscan report : final : - \"{{.Output}}/directory/beautify-{{.Workspace}}.txt\" - \"{{.Output}}/directory/paths-{{.Workspace}}.csv\" params : - inputfile : \"{{.Output}}/probing/http-{{.Workspace}}.txt\" - wordlists : \"{{.Data}}/wordlists/content/small.txt\"","title":"Reports"},{"location":"workflow/parameters/","text":"Parameters \u00b6 Parameters will be replace when the routine running. Default Parameters that built-in the Engine \u00b6 Default variable Assume you use default config at ~/.osmedeus/config.yaml {{.Workspaces}} Workspaces path ~/.osmedeus/workspaces {{.Storages}} Storages path ~/.osmedeus/storages {{.Binaries}} Binary path ~/osmedeus-base/binaries {{.Data}} Data path ~/osmedeus-base/data {{.Scripts}} Script path ~/osmedeus-base/scripts {{.BaseFolder}} Base path ~/osmedeus-base {{.Workflow}} Workflow path ~/osmedeus-base/workflow {{.Cloud}} Cloud path ~/osmedeus-base/cloud Parameters generated from input \u00b6 Dynamic variable E.g command: osmedeus scan -t example.com {{.Target}} example.com {{.Workspace}} just like {{.Target}} but strip out / char to _ . For example example.com/a/b --> example.com_a_b {{.Output}} {{.Output}} == {{.Workspaces}} + {{.Workspace}} {{.Org}} example {{.custom}} Extra param take from --params 'custom=anything'","title":"Parameters"},{"location":"workflow/parameters/#parameters","text":"Parameters will be replace when the routine running.","title":" Parameters"},{"location":"workflow/parameters/#default-parameters-that-built-in-the-engine","text":"Default variable Assume you use default config at ~/.osmedeus/config.yaml {{.Workspaces}} Workspaces path ~/.osmedeus/workspaces {{.Storages}} Storages path ~/.osmedeus/storages {{.Binaries}} Binary path ~/osmedeus-base/binaries {{.Data}} Data path ~/osmedeus-base/data {{.Scripts}} Script path ~/osmedeus-base/scripts {{.BaseFolder}} Base path ~/osmedeus-base {{.Workflow}} Workflow path ~/osmedeus-base/workflow {{.Cloud}} Cloud path ~/osmedeus-base/cloud","title":"Default Parameters that built-in the Engine"},{"location":"workflow/parameters/#parameters-generated-from-input","text":"Dynamic variable E.g command: osmedeus scan -t example.com {{.Target}} example.com {{.Workspace}} just like {{.Target}} but strip out / char to _ . For example example.com/a/b --> example.com_a_b {{.Output}} {{.Output}} == {{.Workspaces}} + {{.Workspace}} {{.Org}} example {{.custom}} Extra param take from --params 'custom=anything'","title":"Parameters generated from input"},{"location":"workflow/scripts/","text":"Scripts \u00b6 Script is an alias for the Golang function that you can call from YAML Workflow that allows you to do complex logic which native support from the Osmedeus core engine. /* File to store all the script for better reference */ const ( SetVar = \"SetVar\" GetOSEnv = \"GetOSEnv\" ) const ( Cleaning = \"Cleaning\" CleanAmass = \"CleanAmass\" CleanRustScan = \"CleanRustScan\" CleanGoBuster = \"CleanGoBuster\" CleanMassdns = \"CleanMassdns\" CleanSWebanalyze = \"CleanSWebanalyze\" CleanJSONDnsx = \"CleanJSONDnsx\" CleanWebanalyze = \"CleanWebanalyze\" CleanArjun = \"CleanArjun\" GenNucleiReport = \"GenNucleiReport\" CleanJSONHttpx = \"CleanJSONHttpx\" ) const ( ExecCmd = \"ExecCmd\" ExecCmdB = \"ExecCmdB\" ExecCmdWithOutput = \"ExecCmdWithOutput\" ExecContain = \"ExecContain\" ) const ( Sleep = \"Sleep\" Exit = \"Exit\" CastToInt = \"CastToInt\" StripSlash = \"StripSlash\" Printf = \"Printf\" Cat = \"Cat\" )","title":"Defination"},{"location":"workflow/scripts/#scripts","text":"Script is an alias for the Golang function that you can call from YAML Workflow that allows you to do complex logic which native support from the Osmedeus core engine. /* File to store all the script for better reference */ const ( SetVar = \"SetVar\" GetOSEnv = \"GetOSEnv\" ) const ( Cleaning = \"Cleaning\" CleanAmass = \"CleanAmass\" CleanRustScan = \"CleanRustScan\" CleanGoBuster = \"CleanGoBuster\" CleanMassdns = \"CleanMassdns\" CleanSWebanalyze = \"CleanSWebanalyze\" CleanJSONDnsx = \"CleanJSONDnsx\" CleanWebanalyze = \"CleanWebanalyze\" CleanArjun = \"CleanArjun\" GenNucleiReport = \"GenNucleiReport\" CleanJSONHttpx = \"CleanJSONHttpx\" ) const ( ExecCmd = \"ExecCmd\" ExecCmdB = \"ExecCmdB\" ExecCmdWithOutput = \"ExecCmdWithOutput\" ExecContain = \"ExecContain\" ) const ( Sleep = \"Sleep\" Exit = \"Exit\" CastToInt = \"CastToInt\" StripSlash = \"StripSlash\" Printf = \"Printf\" Cat = \"Cat\" )","title":" Scripts"},{"location":"workflow/use-your-own-wordlists/","text":"Use your own wordlists \u00b6 You can start your own wordlists to brute force dns and directory at ~/osmedeus-base/workflow Table below is how I like to structure it but you can edit any file if you want. Directory \u00b6 Directory Wordlists Description ~/osmedeus-base/data/content/small.txt Use for Directory scan of general module ~/osmedeus-base/data/content/medium.txt Use for Directory scan of medium module ~/osmedeus-base/data/content/big.txt Use for Directory scan of slow module Dns \u00b6 Dns Wordlists Description ~/osmedeus-base/data/dns/shorts.txt Use for Dns Brute-forcing module ~/osmedeus-base/data/resolvers.txt Resolver list for Dns Brute-forcing module","title":"Use Your Own wordlists"},{"location":"workflow/use-your-own-wordlists/#use-your-own-wordlists","text":"You can start your own wordlists to brute force dns and directory at ~/osmedeus-base/workflow Table below is how I like to structure it but you can edit any file if you want.","title":"Use your own wordlists"},{"location":"workflow/use-your-own-wordlists/#directory","text":"Directory Wordlists Description ~/osmedeus-base/data/content/small.txt Use for Directory scan of general module ~/osmedeus-base/data/content/medium.txt Use for Directory scan of medium module ~/osmedeus-base/data/content/big.txt Use for Directory scan of slow module","title":"Directory"},{"location":"workflow/use-your-own-wordlists/#dns","text":"Dns Wordlists Description ~/osmedeus-base/data/dns/shorts.txt Use for Dns Brute-forcing module ~/osmedeus-base/data/resolvers.txt Resolver list for Dns Brute-forcing module","title":"Dns"}]}