{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 The Introduction Presentation can be found here What is Osmedeus? \u00b6 Osmedeus is a Workflow Engine for Offensive Security. It was designed to build a foundation with the capability and flexibility that allow you to automatic your reconnaissance methodology on a large number of targets. Showcases \u00b6 The Engine has successfully found a tremendous number of security vulnerabilities in many big companies out there with My reconnaissance methodlogy Gettting Started \u00b6 Click here to know how to Installtion Osmedeus Learn more about the Architechture of Osmedeus Demo Video can be found here Features \u00b6 Significantly speed up your recon process Easy to organize and optimize results Easy to customize your workflow Easy to integrate with new tools Easy to scale across large number of targets Easy to synchronize the results across many places","title":"Home"},{"location":"#introduction","text":"The Introduction Presentation can be found here","title":" Introduction"},{"location":"#what-is-osmedeus","text":"Osmedeus is a Workflow Engine for Offensive Security. It was designed to build a foundation with the capability and flexibility that allow you to automatic your reconnaissance methodology on a large number of targets.","title":"What is Osmedeus?"},{"location":"#showcases","text":"The Engine has successfully found a tremendous number of security vulnerabilities in many big companies out there with My reconnaissance methodlogy","title":"Showcases"},{"location":"#gettting-started","text":"Click here to know how to Installtion Osmedeus Learn more about the Architechture of Osmedeus Demo Video can be found here","title":"Gettting Started"},{"location":"#features","text":"Significantly speed up your recon process Easy to organize and optimize results Easy to customize your workflow Easy to integrate with new tools Easy to scale across large number of targets Easy to synchronize the results across many places","title":"Features"},{"location":"architecture/","text":"Architecture \u00b6 The structure of the Osmedeus \u00b6 The tool has two main components: Core Engine written in Golang that is responsible for handling all the logic and a Workflow which is a collection of YAML files that describe your methodology Target can be domain, url, IP, CIDR or anything that fit your workflow. Comparison to the old version \u00b6","title":"Overview"},{"location":"architecture/#architecture","text":"","title":" Architecture"},{"location":"architecture/#the-structure-of-the-osmedeus","text":"The tool has two main components: Core Engine written in Golang that is responsible for handling all the logic and a Workflow which is a collection of YAML files that describe your methodology Target can be domain, url, IP, CIDR or anything that fit your workflow.","title":"The structure of the Osmedeus"},{"location":"architecture/#comparison-to-the-old-version","text":"","title":"Comparison to the old version"},{"location":"donation/","text":"Donation \u00b6 If you love my tools and would like to support my work, please check out some donation methods below. Sponsor \u00b6 If you or your organization would like to sponsor this project or show your logo in this project feel free to contact me via here For Everyone \u00b6 Become a backer and you will appear here. For Crypto Fan \u00b6 or if you want to copy in text BNB (BEP20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 BTC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458 ETH (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 USDT (BEP20): 0xaFC10B8064fDD47D04F1bFd8E6Ab59334711cAE6 USDT (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 SOL: 6w4kMFhS61VGVvgxW29sdC3jnzbAFpP2Cpcd4UJXVSZc For People in My local country \u00b6","title":"Sponsor & Donation"},{"location":"donation/#donation","text":"If you love my tools and would like to support my work, please check out some donation methods below.","title":"Donation"},{"location":"donation/#sponsor","text":"If you or your organization would like to sponsor this project or show your logo in this project feel free to contact me via here","title":"Sponsor"},{"location":"donation/#for-everyone","text":"Become a backer and you will appear here.","title":"For Everyone"},{"location":"donation/#for-crypto-fan","text":"or if you want to copy in text BNB (BEP20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 BTC (ERC20): 0x055ff71344bcff0362c0eaf887439a73885da458 ETH (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 USDT (BEP20): 0xaFC10B8064fDD47D04F1bFd8E6Ab59334711cAE6 USDT (ERC20): 0x39D84d5b9dAD64ce380E9A97327AD0fCA4eE3B94 SOL: 6w4kMFhS61VGVvgxW29sdC3jnzbAFpP2Cpcd4UJXVSZc","title":"For Crypto Fan"},{"location":"donation/#for-people-in-my-local-country","text":"","title":"For People in My local country"},{"location":"faq/","text":"FAQ \u00b6 How to setup the Osmedeus? Please check out installation guide here Where I can get a live support? You can Join Discord Server here to see if anyone can help Is it support Windows? Unfortunately not, it was designed for Linux only. You will need to use Docker or VM if you really want to run Osmedeus on Windows. What are the donation tiers and how much should I donate to be eligible for the premium package? You can join the Patreon here www.patreon.com/j3ssie or here https://docs.osmedeus.org/donation/ to see a private post contains a download link for premium packages. Then you will be invited to backer channel to get direct support then What is the specification required to run Osmedeus? I recommend using VPS since it takes a lot of network bandwidth, the minimum spec would be 1 CPU 2GB RAM. You can of course increase or decrease the threads in the workflow to make it work in any spec Does the X scan run tool Y or not?? Read the flow and module files to see what the step running. Seriously, read the flow and module files. Remember that you were warned twice about reading the flow and module files. Just search your tool command no the workflow folder. where can I find result after the scan done? All of your scan data store at ~/.osmedeus/workspaces/","title":"FAQ"},{"location":"faq/#faq","text":"How to setup the Osmedeus? Please check out installation guide here Where I can get a live support? You can Join Discord Server here to see if anyone can help Is it support Windows? Unfortunately not, it was designed for Linux only. You will need to use Docker or VM if you really want to run Osmedeus on Windows. What are the donation tiers and how much should I donate to be eligible for the premium package? You can join the Patreon here www.patreon.com/j3ssie or here https://docs.osmedeus.org/donation/ to see a private post contains a download link for premium packages. Then you will be invited to backer channel to get direct support then What is the specification required to run Osmedeus? I recommend using VPS since it takes a lot of network bandwidth, the minimum spec would be 1 CPU 2GB RAM. You can of course increase or decrease the threads in the workflow to make it work in any spec Does the X scan run tool Y or not?? Read the flow and module files to see what the step running. Seriously, read the flow and module files. Remember that you were warned twice about reading the flow and module files. Just search your tool command no the workflow folder. where can I find result after the scan done? All of your scan data store at ~/.osmedeus/workspaces/","title":"FAQ"},{"location":"installation/","text":"Installation \u00b6 Follow this link to see a video instruction Install from a base repository \u00b6 NOTE that you need some essential tools like curl, wget, git, zip, tmux and login as root to start bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh ) \" Install from a build release \u00b6 Make sure you login as root otherwise run sudo su first then put build-osm.zip to any folder (e.g: /opt/ ) unzip -q build-osm.zip && cd build-osm ./build.sh # verify your installation with health command osmedeus health Verify the installation process \u00b6 Just run the command osmedeus health . If you see the content like a image below then it's mean the installation process has been success. The installation process is still success if you see this message. It's just one of many Premium features [-] Cloud config setup incorrectly. If you install osmedeus on a single machine then it's okay to ignore the cloud setup","title":"Installation"},{"location":"installation/#installation","text":"Follow this link to see a video instruction","title":" Installation"},{"location":"installation/#install-from-a-base-repository","text":"NOTE that you need some essential tools like curl, wget, git, zip, tmux and login as root to start bash -c \" $( curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh ) \"","title":"Install from a base repository"},{"location":"installation/#install-from-a-build-release","text":"Make sure you login as root otherwise run sudo su first then put build-osm.zip to any folder (e.g: /opt/ ) unzip -q build-osm.zip && cd build-osm ./build.sh # verify your installation with health command osmedeus health","title":"Install from a build release"},{"location":"installation/#verify-the-installation-process","text":"Just run the command osmedeus health . If you see the content like a image below then it's mean the installation process has been success. The installation process is still success if you see this message. It's just one of many Premium features [-] Cloud config setup incorrectly. If you install osmedeus on a single machine then it's okay to ignore the cloud setup","title":"Verify the installation process"},{"location":"premium/","text":"What is Premium Package? \u00b6 You can choose some donation methods here to get the premium package Premium package is where I share some of the cutting edge features of Osmedeus and my Methodology that including Workflow and Wordlists have been fully tested by me. What you will get? My private workflow which is fully tested on many site. Wordlists that I collected from many sources for a long time. Private third-party tools made the result a lot more accurate. My Private Jaeles Signatures. My methodology \u00b6 Git Storages natively supported \u00b6 Even though you can use Git Storages by writing your workflow. The premium workflow also comes with storages script. All you need to do is setup your Gitlab repository. Support Distributed Scan \u00b6","title":"What is Premium Package?"},{"location":"premium/#what-is-premium-package","text":"You can choose some donation methods here to get the premium package Premium package is where I share some of the cutting edge features of Osmedeus and my Methodology that including Workflow and Wordlists have been fully tested by me. What you will get? My private workflow which is fully tested on many site. Wordlists that I collected from many sources for a long time. Private third-party tools made the result a lot more accurate. My Private Jaeles Signatures.","title":"What is Premium Package?"},{"location":"premium/#my-methodology","text":"","title":"My methodology"},{"location":"premium/#git-storages-natively-supported","text":"Even though you can use Git Storages by writing your workflow. The premium workflow also comes with storages script. All you need to do is setup your Gitlab repository.","title":"Git Storages natively supported"},{"location":"premium/#support-distributed-scan","text":"","title":"Support Distributed Scan"},{"location":"structure/","text":"Detail Structure of the tool \u00b6 Folders that Osmedeus will store data into ( source ) \u00b6 What contains in a Osmedeus release package? \u00b6","title":"Detail Structure of Osmedeus"},{"location":"structure/#detail-structure-of-the-tool","text":"","title":"Detail Structure of the tool"},{"location":"structure/#folders-that-osmedeus-will-store-data-into-source","text":"","title":"Folders that Osmedeus will store data into (source)"},{"location":"structure/#what-contains-in-a-osmedeus-release-package","text":"","title":"What contains in a Osmedeus release package?"},{"location":"workflow/","text":"Understand the workflow \u00b6 Workflow is the core of the Osmedeus Engine which represents your methodology as YAML files. All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work Module contains detail of multiple step. Flow contains multiple module and also define order how to run these modules. Step is smallest part of the Osmedeus routine. Flow \u00b6 name : general desc : run normal routine type : general # this is a folder name that will contains module file validator : domain # validate the input provide from -t option routines : - modules : - subdomain - modules : - probing - modules : - ssame - modules : - screenshot - modules : # these module will be run in parallel - fingerprint - spider - sto - modules : # these module will be run in parallel - archive - ipspace - modules : - vulnscan - modules : - vhostscan - modules : - portscan - modules : - pdirbscan - modules : - dirbscan # push final result again - modules : - summary Module \u00b6 Step \u00b6 steps : # all step run in serial # variation 1 - required : # Check if all the files exist or the step will not run - filename-1-here.txt - filename-2-here.txt conditions : # Boolean conditions check with built-in scripts - \"FileLength('filename.txt') > 1000\" commands : # unix command and it will be run in parallel - \"unix command 1 here\" - \"unix command 2 here\" scripts : - SortU(\"filename-here.txt\") - TeleMessByFile(\"#dirb\", \"beautify-{{.Workspace}}.txt\") ## only run if conditions is false rcommands : # run in parallel - \"unix command 1 here\" - \"unix command 2 here\" rscripts : - ErrPrintf(\"Filter\", \"Got input file greater than 1000 line\") - Exit(1) ######################### # variation 2 that will run the step but with input is each like of 'source' section - source : \"{{.inputfile}}\" # source file to loop through threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/go/ffuf-mod -H 'X-Forwarded-For: 127.0.0.1' -t {{.fthreads}} -recursion-depth {{.recursion}} -D -e 'asp,aspx,php,html,htm,jsp,cgi' -timeout 15 -get-hash -ac -s -fc '429,404,400' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : - SortU(\"{{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv\")","title":"Understand the Workflow"},{"location":"workflow/#understand-the-workflow","text":"Workflow is the core of the Osmedeus Engine which represents your methodology as YAML files. All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work Module contains detail of multiple step. Flow contains multiple module and also define order how to run these modules. Step is smallest part of the Osmedeus routine.","title":"Understand the workflow"},{"location":"workflow/#flow","text":"name : general desc : run normal routine type : general # this is a folder name that will contains module file validator : domain # validate the input provide from -t option routines : - modules : - subdomain - modules : - probing - modules : - ssame - modules : - screenshot - modules : # these module will be run in parallel - fingerprint - spider - sto - modules : # these module will be run in parallel - archive - ipspace - modules : - vulnscan - modules : - vhostscan - modules : - portscan - modules : - pdirbscan - modules : - dirbscan # push final result again - modules : - summary","title":"Flow"},{"location":"workflow/#module","text":"","title":"Module"},{"location":"workflow/#step","text":"steps : # all step run in serial # variation 1 - required : # Check if all the files exist or the step will not run - filename-1-here.txt - filename-2-here.txt conditions : # Boolean conditions check with built-in scripts - \"FileLength('filename.txt') > 1000\" commands : # unix command and it will be run in parallel - \"unix command 1 here\" - \"unix command 2 here\" scripts : - SortU(\"filename-here.txt\") - TeleMessByFile(\"#dirb\", \"beautify-{{.Workspace}}.txt\") ## only run if conditions is false rcommands : # run in parallel - \"unix command 1 here\" - \"unix command 2 here\" rscripts : - ErrPrintf(\"Filter\", \"Got input file greater than 1000 line\") - Exit(1) ######################### # variation 2 that will run the step but with input is each like of 'source' section - source : \"{{.inputfile}}\" # source file to loop through threads : '{{.dirbThreads}}' commands : - \"{{.Binaries}}/go/ffuf-mod -H 'X-Forwarded-For: 127.0.0.1' -t {{.fthreads}} -recursion-depth {{.recursion}} -D -e 'asp,aspx,php,html,htm,jsp,cgi' -timeout 15 -get-hash -ac -s -fc '429,404,400' -of json -o {{.Output}}/directory/raw-{{._id_}}.json -u '{{.line}}/FUZZ' -w {{.wordlists}}:FUZZ\" scripts : - SortU(\"{{.Storages}}/paths/{{.Workspace}}/paths-{{.Workspace}}.csv\")","title":"Step"},{"location":"installation/cloud-setup/","text":"Cloud config for distributed scan \u00b6 This is only avalible in premium package Currently, Osmedeus only support Digital Ocean and Linode provider. The default cloud config store at ~/osmedeus-base/cloud/config.yaml . Digital Ocean \u00b6 clouds : - token : \"your-api-token\" provider : \"digitalocean\" name : \"do-osmp\" default_image : \"debian-10-x64\" size : \"s-2vcpu-4gb\" region : \"sfo3\" Linode \u00b6 clouds : - token : \"your-api-token\" provider : \"linode\" name : \"linode-osmp\" default_image : \"linode/debian10\" # or can use --size 'g6-standard-1' size : \"g6-standard-1\" region : \"us-east\"","title":"Setup for Distributed Scan"},{"location":"installation/cloud-setup/#cloud-config-for-distributed-scan","text":"This is only avalible in premium package Currently, Osmedeus only support Digital Ocean and Linode provider. The default cloud config store at ~/osmedeus-base/cloud/config.yaml .","title":"Cloud config for distributed scan"},{"location":"installation/cloud-setup/#digital-ocean","text":"clouds : - token : \"your-api-token\" provider : \"digitalocean\" name : \"do-osmp\" default_image : \"debian-10-x64\" size : \"s-2vcpu-4gb\" region : \"sfo3\"","title":"Digital Ocean"},{"location":"installation/cloud-setup/#linode","text":"clouds : - token : \"your-api-token\" provider : \"linode\" name : \"linode-osmp\" default_image : \"linode/debian10\" # or can use --size 'g6-standard-1' size : \"g6-standard-1\" region : \"us-east\"","title":"Linode"},{"location":"installation/token/","text":"Note that this setup is Optional . You can still use the tool perfectly fine without it! There are some places that tokens will store in Osmedeus below Main token file \u00b6 By default all main tokens will be store at ~/osmedeus-base/token/osm-default.rc There some essential tokens in the token file. - The Github token is needed for github search. - All the TELEGRAM_ is for notification. # Set github token for run github scan export GITHUB_TOKEN = xxx,xxxx # for telegram export TELEGRAM_API_TOKEN = 1111114500 :AAGx ## use this command to get channel ID ## curl 'https://api.telegram.org/bot$TELEGRAM_API_TOKEN/sendMessage?chat_id=@osmpReports&text=hello' export TELEGRAM_CHANNEL = -100XXXXX export TELEGRAM_STATUS_CHANNEL = -100XXXXX export TELEGRAM_REPORT_CHANNEL = -100XXXXX export TELEGRAM_SENSITIVE_CHANNEL = -100XXXXX export TELEGRAM_DIRB_CHANNEL = -100XXXXX export TELEGRAM_MICS_CHANNEL = -100XXXXX After modified the tokens, then run commands below to reload token to the osmedeus config.yaml # or edit file osm-default.rc # add osmedeus-base/token/osm-default.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/osm-default.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload Amass config \u00b6 By Default Amass config will be store at ~/osmedeus-base/data/configs/amass.ini Notification \u00b6 Note that this setup is Optional . You can still use the tool perfectly fine without it! Notification with Telegram \u00b6 You can setup telegram tokens at Setup Token & API Key Setup Storages \u00b6 Note that this setup is Optional . You can still use the tool perfectly fine without it! Follow this video for more detail. \u00b6 All of your storages setup will be store at ~/osmedeus-base/token/storages-alias.rc Modify the content of Storages Config file \u00b6 Create your SSH key and add to a user have access to all of the repos below. Save that key as ~/.osmedeus/secret_key.private # for storages export SECRET_KEY = ~/.osmedeus/secret_key.private # core one export SUMMARY_REPO = git@gitlab.com:not-j3ssie/your-osmd-summary export VULN_REPO = git@gitlab.com:not-j3ssie/your-osmd-vuln export PATHS_REPO = git@gitlab.com:not-j3ssie/your-osmd-paths export HTTP_REPO = git@gitlab.com:not-j3ssie/your-osmd-http # mics one export ASSETS_REPO = git@gitlab.com:not-j3ssie/your-osmd-assets export PORTS_REPO = git@gitlab.com:not-j3ssie/your-osmd-ports export SUBDOMAIN_REPO = git@gitlab.com:not-j3ssie/your-osmd-subdomain Please change your username and repository name Note that not-j3ssie is your gitlab username and your-osmd-summary is your Gitlab repo name. Run these commands below if you not using git before git config --global user.name \"your_gitlab_user\" git config --global user.email \"your_gitlab_uid@users.noreply.gitlab.com\" Load the storages variables to Osmedeus config \u00b6 # or edit file storages-alias.rc # add osmedeus-base/storages-alias.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/storages-alias.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload # finally you can check the content of ~/.osmedeus/config.yaml file # to see if config actually change or not like below cat ~/.osmedeus/config.yaml # The content should be showed like this # ... # storages: # ... # summary_repo: git@gitlab.com:j3ssie/dosm-summary # summary_storage: ~/.osmedeus/storages/summary # ... # now run the health check again it will clone the osmedeus health # then check out your storages folder at `~/.osmedeus/storages` ls ~/.osmedeus/storages/summary/","title":"Setup Token & API Key"},{"location":"installation/token/#main-token-file","text":"By default all main tokens will be store at ~/osmedeus-base/token/osm-default.rc There some essential tokens in the token file. - The Github token is needed for github search. - All the TELEGRAM_ is for notification. # Set github token for run github scan export GITHUB_TOKEN = xxx,xxxx # for telegram export TELEGRAM_API_TOKEN = 1111114500 :AAGx ## use this command to get channel ID ## curl 'https://api.telegram.org/bot$TELEGRAM_API_TOKEN/sendMessage?chat_id=@osmpReports&text=hello' export TELEGRAM_CHANNEL = -100XXXXX export TELEGRAM_STATUS_CHANNEL = -100XXXXX export TELEGRAM_REPORT_CHANNEL = -100XXXXX export TELEGRAM_SENSITIVE_CHANNEL = -100XXXXX export TELEGRAM_DIRB_CHANNEL = -100XXXXX export TELEGRAM_MICS_CHANNEL = -100XXXXX After modified the tokens, then run commands below to reload token to the osmedeus config.yaml # or edit file osm-default.rc # add osmedeus-base/token/osm-default.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/osm-default.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload","title":"Main token file"},{"location":"installation/token/#amass-config","text":"By Default Amass config will be store at ~/osmedeus-base/data/configs/amass.ini","title":"Amass config"},{"location":"installation/token/#notification","text":"Note that this setup is Optional . You can still use the tool perfectly fine without it!","title":"Notification"},{"location":"installation/token/#notification-with-telegram","text":"You can setup telegram tokens at Setup Token & API Key","title":"Notification with Telegram"},{"location":"installation/token/#setup-storages","text":"Note that this setup is Optional . You can still use the tool perfectly fine without it!","title":"Setup Storages"},{"location":"installation/token/#follow-this-video-for-more-detail","text":"All of your storages setup will be store at ~/osmedeus-base/token/storages-alias.rc","title":"Follow this video for more detail."},{"location":"installation/token/#modify-the-content-of-storages-config-file","text":"Create your SSH key and add to a user have access to all of the repos below. Save that key as ~/.osmedeus/secret_key.private # for storages export SECRET_KEY = ~/.osmedeus/secret_key.private # core one export SUMMARY_REPO = git@gitlab.com:not-j3ssie/your-osmd-summary export VULN_REPO = git@gitlab.com:not-j3ssie/your-osmd-vuln export PATHS_REPO = git@gitlab.com:not-j3ssie/your-osmd-paths export HTTP_REPO = git@gitlab.com:not-j3ssie/your-osmd-http # mics one export ASSETS_REPO = git@gitlab.com:not-j3ssie/your-osmd-assets export PORTS_REPO = git@gitlab.com:not-j3ssie/your-osmd-ports export SUBDOMAIN_REPO = git@gitlab.com:not-j3ssie/your-osmd-subdomain Please change your username and repository name Note that not-j3ssie is your gitlab username and your-osmd-summary is your Gitlab repo name. Run these commands below if you not using git before git config --global user.name \"your_gitlab_user\" git config --global user.email \"your_gitlab_uid@users.noreply.gitlab.com\"","title":"Modify the content of Storages Config file"},{"location":"installation/token/#load-the-storages-variables-to-osmedeus-config","text":"# or edit file storages-alias.rc # add osmedeus-base/storages-alias.rc to your ~/.bashrc file echo 'source $HOME/osmedeus-base/token/storages-alias.rc' >> ~/.bashrc && source ~/.bashrc # reload config to osmedeus osmedeus config reload # finally you can check the content of ~/.osmedeus/config.yaml file # to see if config actually change or not like below cat ~/.osmedeus/config.yaml # The content should be showed like this # ... # storages: # ... # summary_repo: git@gitlab.com:j3ssie/dosm-summary # summary_storage: ~/.osmedeus/storages/summary # ... # now run the health check again it will clone the osmedeus health # then check out your storages folder at `~/.osmedeus/storages` ls ~/.osmedeus/storages/summary/","title":"Load the storages variables to Osmedeus config"},{"location":"installation/usage/","text":"Usage \u00b6 Practical Usage with examples commands \u00b6 # Practical Usage: osmedeus scan -f [ flowName ] -t [ target ] osmedeus scan -f [ flowName ] -T [ targetsFile ] osmedeus scan -f /path/to/flow.yaml -t [ target ] osmedeus scan -m /path/to/module.yaml -t [ target ] --params 'port=9200' osmedeus scan -m /path/to/module.yaml -t [ target ] -l /tmp/log.log cat targets | osmedeus scan -f sample # Cloud Usage: osmedeus provider build osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] # Example Commands: osmedeus scan -t target.com osmedeus scan -T list_of_targets.txt -W custom_workspaces osmedeus scan -t target.com -w workspace_name --debug osmedeus scan -f single -t www.sample.com osmedeus scan -f ovuln-T list_of_target.txt osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml -t list_of_urls.txt osmedeus health ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/busting.yaml -D # Private Documentation can be found here: https://frosty-minsky-779bed.netlify.app/introduction/ # Start Web UI at https://localhost:8000/ui/ osmedeus server # login with credentials from `~/.osmedeus/config.yaml` # Delete workspace osmedeus config delete -w workspace_name help - help about any command \u00b6 osmedeus help osmedeus scan help scan - Actually start a scan based on predefined flow \u00b6 # Practical Scan Usage: ## Start a simple scan with default 'general' flow osmedeus scan -t sample.com ## Start a general scan but exclude some of the module osmedeus scan -t sample.com -x screenshot -x spider ## Start a simple scan with other flow osmedeus scan -f vuln -t sample.com ## Use a custom wordlist osmedeus scan -t sample.com -p 'wordlists={{.Data}}/wordlists/content/big.txt' -p 'fthreads=40' ## Scan list of targets osmedeus scan -T list_of_targets.txt ## Get target from a stdin and start the scan with 2 concurrency cat list_of_targets.txt | osmedeus scan -c 2 server - Start web UI server \u00b6 osmedeus server --port 9000 utils - Utility to get some information from the system \u00b6 osmedeus utils tmux ls osmedeus utils tmux logs -A -l 10 osmedeus utils ps osmedeus utils ps --proc 'jaeles' osmedeus utils cron --cmd 'osmdeus scan -t example.com' --sch 60 osmedeus utils cron --for --cmd 'osmedeus scan -t example.com' health - Run diagnostics to check configurations \u00b6 cloud - Run scan in Distributed Cloud mode \u00b6 # Cloud Usage osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -m [ modulePath ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --token xxx -G -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] provider - Cloud utils for Distributed Mode \u00b6 # Provider Usage osmedeus provider build osmedeus provider build --token xxx --rebuild --ic osmedeus provider create --name 'sample' osmedeus provider health --debug","title":"Usage"},{"location":"installation/usage/#usage","text":"","title":"Usage"},{"location":"installation/usage/#practical-usage-with-examples-commands","text":"# Practical Usage: osmedeus scan -f [ flowName ] -t [ target ] osmedeus scan -f [ flowName ] -T [ targetsFile ] osmedeus scan -f /path/to/flow.yaml -t [ target ] osmedeus scan -m /path/to/module.yaml -t [ target ] --params 'port=9200' osmedeus scan -m /path/to/module.yaml -t [ target ] -l /tmp/log.log cat targets | osmedeus scan -f sample # Cloud Usage: osmedeus provider build osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ] # Example Commands: osmedeus scan -t target.com osmedeus scan -T list_of_targets.txt -W custom_workspaces osmedeus scan -t target.com -w workspace_name --debug osmedeus scan -f single -t www.sample.com osmedeus scan -f ovuln-T list_of_target.txt osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml -t list_of_urls.txt osmedeus health ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/dirbscan.yaml ls ~/.osmedeus/storages/summary/ | osmedeus scan -m ~/osmedeus-base/workflow/test/busting.yaml -D # Private Documentation can be found here: https://frosty-minsky-779bed.netlify.app/introduction/ # Start Web UI at https://localhost:8000/ui/ osmedeus server # login with credentials from `~/.osmedeus/config.yaml` # Delete workspace osmedeus config delete -w workspace_name","title":"Practical Usage with examples commands"},{"location":"installation/usage/#help-help-about-any-command","text":"osmedeus help osmedeus scan help","title":"help - help about any command"},{"location":"installation/usage/#scan-actually-start-a-scan-based-on-predefined-flow","text":"# Practical Scan Usage: ## Start a simple scan with default 'general' flow osmedeus scan -t sample.com ## Start a general scan but exclude some of the module osmedeus scan -t sample.com -x screenshot -x spider ## Start a simple scan with other flow osmedeus scan -f vuln -t sample.com ## Use a custom wordlist osmedeus scan -t sample.com -p 'wordlists={{.Data}}/wordlists/content/big.txt' -p 'fthreads=40' ## Scan list of targets osmedeus scan -T list_of_targets.txt ## Get target from a stdin and start the scan with 2 concurrency cat list_of_targets.txt | osmedeus scan -c 2","title":"scan - Actually start a scan based on predefined flow"},{"location":"installation/usage/#server-start-web-ui-server","text":"osmedeus server --port 9000","title":"server - Start web UI server"},{"location":"installation/usage/#utils-utility-to-get-some-information-from-the-system","text":"osmedeus utils tmux ls osmedeus utils tmux logs -A -l 10 osmedeus utils ps osmedeus utils ps --proc 'jaeles' osmedeus utils cron --cmd 'osmdeus scan -t example.com' --sch 60 osmedeus utils cron --for --cmd 'osmedeus scan -t example.com'","title":"utils - Utility to get some information from the system"},{"location":"installation/usage/#health-run-diagnostics-to-check-configurations","text":"","title":"health - Run diagnostics to check configurations"},{"location":"installation/usage/#cloud-run-scan-in-distributed-cloud-mode","text":"# Cloud Usage osmedeus cloud -f [ flowName ] -t [ target ] osmedeus cloud -m [ modulePath ] -t [ target ] osmedeus cloud -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --token xxx -G -c 10 -f [ flowName ] -T [ targetsFile ] osmedeus cloud --chunk -c 10 -f [ flowName ] -t [ targetsFile ]","title":"cloud - Run scan in Distributed Cloud mode"},{"location":"installation/usage/#provider-cloud-utils-for-distributed-mode","text":"# Provider Usage osmedeus provider build osmedeus provider build --token xxx --rebuild --ic osmedeus provider create --name 'sample' osmedeus provider health --debug","title":"provider - Cloud utils for Distributed Mode"},{"location":"installation/web-ui/","text":"Web UI (Experimental) \u00b6 Start a web server \u00b6 Open a new terminal or tmux and run osmedeus server The server will be avaliable at HTTPS URL here: https://your-vps-ip:8000/ui/ Then get the credentials from this file. cat ~/.osmedeus/config.yaml ... client: password: xxxx username: osmedeus ...","title":"Web UI (Experimental)"},{"location":"installation/web-ui/#web-ui-experimental","text":"","title":" Web UI (Experimental)"},{"location":"installation/web-ui/#start-a-web-server","text":"Open a new terminal or tmux and run osmedeus server The server will be avaliable at HTTPS URL here: https://your-vps-ip:8000/ui/ Then get the credentials from this file. cat ~/.osmedeus/config.yaml ... client: password: xxxx username: osmedeus ...","title":"Start a web server"},{"location":"premium/install-premium-package/","text":"How to Install the Premium Package? \u00b6 It's very simple. Once your donation is completed. Send me an DM on Discord or Twitter then you will be invited to the exclusive Discord Channel and get an one-liner to install it.","title":"How to Install the Premium Package?"},{"location":"premium/install-premium-package/#how-to-install-the-premium-package","text":"It's very simple. Once your donation is completed. Send me an DM on Discord or Twitter then you will be invited to the exclusive Discord Channel and get an one-liner to install it.","title":"How to Install the Premium Package?"},{"location":"references/git-scripts/","text":"Git Scripts \u00b6 const ( RRSync = \"RRSync\" Clone = \"Clone\" FClone = \"FClone\" PushResult = \"PushResult\" PushFolder = \"PushFolder\" PullFolder = \"PullFolder\" DiffCompare = \"DiffCompare\" GitDiff = \"GitDiff\" LoopGitDiff = \"LoopGitDiff\" GetFileFromCDN = \"GetFileFromCDN\" GetWSFromCDN = \"GetWSFromCDN\" DownloadFile = \"DownloadFile\" // for gitlab API only CreateRepo = \"CreateRepo\" DeleteRepo = \"DeleteRepo\" DeleteRepoByPid = \"DeleteRepoByPid\" ListProjects = \"ListProjects\" )","title":"Git Scripts"},{"location":"references/git-scripts/#git-scripts","text":"const ( RRSync = \"RRSync\" Clone = \"Clone\" FClone = \"FClone\" PushResult = \"PushResult\" PushFolder = \"PushFolder\" PullFolder = \"PullFolder\" DiffCompare = \"DiffCompare\" GitDiff = \"GitDiff\" LoopGitDiff = \"LoopGitDiff\" GetFileFromCDN = \"GetFileFromCDN\" GetWSFromCDN = \"GetWSFromCDN\" DownloadFile = \"DownloadFile\" // for gitlab API only CreateRepo = \"CreateRepo\" DeleteRepo = \"DeleteRepo\" DeleteRepoByPid = \"DeleteRepoByPid\" ListProjects = \"ListProjects\" )","title":"Git Scripts"},{"location":"references/io-utils/","text":"I/O Scripts \u00b6 const ( SortU = \"SortU\" SplitFile = \"SplitFile\" Append = \"Append\" Copy = \"Copy\" CreateFolder = \"CreateFolder\" DeleteFile = \"DeleteFile\" DeleteFolder = \"DeleteFolder\" SplitFileByPart = \"SplitFileByPart\" FileLength = \"FileLength\" IsFile = \"IsFile\" EmptyDir = \"EmptyDir\" EmptyFile = \"EmptyFile\" ReadLines = \"ReadLines\" )","title":"IO Scripts"},{"location":"references/io-utils/#io-scripts","text":"const ( SortU = \"SortU\" SplitFile = \"SplitFile\" Append = \"Append\" Copy = \"Copy\" CreateFolder = \"CreateFolder\" DeleteFile = \"DeleteFile\" DeleteFolder = \"DeleteFolder\" SplitFileByPart = \"SplitFileByPart\" FileLength = \"FileLength\" IsFile = \"IsFile\" EmptyDir = \"EmptyDir\" EmptyFile = \"EmptyFile\" ReadLines = \"ReadLines\" )","title":"I/O Scripts"},{"location":"references/noti-scripts/","text":"Noti Scripts \u00b6 const ( // noti for slack StartNoti = \"StartNoti\" DoneNoti = \"DoneNoti\" ReportNoti = \"ReportNoti\" DiffNoti = \"DiffNoti\" CustomNoti = \"CustomNoti\" NotiFile = \"NotiFile\" WebHookNoti = \"WebHookNoti\" // noti for telegram TeleMess = \"TeleMess\" TeleMessWrap = \"TeleMessWrap\" TeleMessByFile = \"TeleMessByFile\" TeleSendFile = \"TeleSendFile\" )","title":"Notification Scripts"},{"location":"references/noti-scripts/#noti-scripts","text":"const ( // noti for slack StartNoti = \"StartNoti\" DoneNoti = \"DoneNoti\" ReportNoti = \"ReportNoti\" DiffNoti = \"DiffNoti\" CustomNoti = \"CustomNoti\" NotiFile = \"NotiFile\" WebHookNoti = \"WebHookNoti\" // noti for telegram TeleMess = \"TeleMess\" TeleMessWrap = \"TeleMessWrap\" TeleMessByFile = \"TeleMessByFile\" TeleSendFile = \"TeleSendFile\" )","title":"Noti Scripts"},{"location":"references/scripts/","text":"Scripts \u00b6 Script is an alias for the Golang function that you can call from YAML Workflow that allows you to do complex logic which native support from the Osmedeus core engine. /* File to store all the script for better reference */ const ( SetVar = \"SetVar\" GetOSEnv = \"GetOSEnv\" ) const ( Cleaning = \"Cleaning\" CleanAmass = \"CleanAmass\" CleanRustScan = \"CleanRustScan\" CleanGoBuster = \"CleanGoBuster\" CleanMassdns = \"CleanMassdns\" CleanSWebanalyze = \"CleanSWebanalyze\" CleanJSONDnsx = \"CleanJSONDnsx\" CleanWebanalyze = \"CleanWebanalyze\" CleanArjun = \"CleanArjun\" GenNucleiReport = \"GenNucleiReport\" CleanJSONHttpx = \"CleanJSONHttpx\" ) const ( ExecCmd = \"ExecCmd\" ExecCmdB = \"ExecCmdB\" ExecCmdWithOutput = \"ExecCmdWithOutput\" ExecContain = \"ExecContain\" ) const ( Sleep = \"Sleep\" Exit = \"Exit\" CastToInt = \"CastToInt\" StripSlash = \"StripSlash\" Printf = \"Printf\" )","title":"Defination"},{"location":"references/scripts/#scripts","text":"Script is an alias for the Golang function that you can call from YAML Workflow that allows you to do complex logic which native support from the Osmedeus core engine. /* File to store all the script for better reference */ const ( SetVar = \"SetVar\" GetOSEnv = \"GetOSEnv\" ) const ( Cleaning = \"Cleaning\" CleanAmass = \"CleanAmass\" CleanRustScan = \"CleanRustScan\" CleanGoBuster = \"CleanGoBuster\" CleanMassdns = \"CleanMassdns\" CleanSWebanalyze = \"CleanSWebanalyze\" CleanJSONDnsx = \"CleanJSONDnsx\" CleanWebanalyze = \"CleanWebanalyze\" CleanArjun = \"CleanArjun\" GenNucleiReport = \"GenNucleiReport\" CleanJSONHttpx = \"CleanJSONHttpx\" ) const ( ExecCmd = \"ExecCmd\" ExecCmdB = \"ExecCmdB\" ExecCmdWithOutput = \"ExecCmdWithOutput\" ExecContain = \"ExecContain\" ) const ( Sleep = \"Sleep\" Exit = \"Exit\" CastToInt = \"CastToInt\" StripSlash = \"StripSlash\" Printf = \"Printf\" )","title":" Scripts"},{"location":"workflow/customize-your-own-workflow/","text":"Customize your own workflow \u00b6 All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work After the installation process is finished, your workflow will be stored at ~/osmedeus-base/workflow . 1. Tweaking commands or threads of the tool depends on your machine specification \u00b6 You can start tweaking the workflow right away by edit any command in module file at ~/osmedeus-base/workflow/general/ folder. For example you can edit the thread of ffuf command here on dirbscan module 2. Fork another one from community workflow \u00b6 Fork this repo from here https://github.com/osmedeus/osmedeus-workflow and change anything you want and put it to ~/osmedeus-base/workflow folder. 3. Writing a new flow \u00b6 Create a new flow file at ~/osmedeus-base/workflow/your-workflow.yaml and folder you-workflow to store your modules file name : your-workflow desc : run normal routine type : you-workflow validator : domain routines : - modules : - your-module-here","title":"Write Your Own Workflow"},{"location":"workflow/customize-your-own-workflow/#customize-your-own-workflow","text":"All Workflow files are YAML-based so make sure you follow the YAML syntax. Otherwise, it wouldn't work After the installation process is finished, your workflow will be stored at ~/osmedeus-base/workflow .","title":"Customize your own workflow"},{"location":"workflow/customize-your-own-workflow/#1-tweaking-commands-or-threads-of-the-tool-depends-on-your-machine-specification","text":"You can start tweaking the workflow right away by edit any command in module file at ~/osmedeus-base/workflow/general/ folder. For example you can edit the thread of ffuf command here on dirbscan module","title":"1. Tweaking commands or threads of the tool depends on your machine specification"},{"location":"workflow/customize-your-own-workflow/#2-fork-another-one-from-community-workflow","text":"Fork this repo from here https://github.com/osmedeus/osmedeus-workflow and change anything you want and put it to ~/osmedeus-base/workflow folder.","title":"2. Fork another one from community workflow"},{"location":"workflow/customize-your-own-workflow/#3-writing-a-new-flow","text":"Create a new flow file at ~/osmedeus-base/workflow/your-workflow.yaml and folder you-workflow to store your modules file name : your-workflow desc : run normal routine type : you-workflow validator : domain routines : - modules : - your-module-here","title":"3. Writing a new flow"},{"location":"workflow/default-workflow/","text":"Default Community workflow \u00b6 Anatomy of Public Community methodology \u00b6 List all flow available \u00b6 $ osmedeus scan -f [ flow-name ] -t example.com general - run normal routine # default workflow cidr - Scan for CIDR File domains - run normal routine but without subdomain scan fast - run fast routine slow - run slow routine sync - Sync result based on git test - testing workflow urls - Scan for List of URLs vuln - run fast routine with vuln scan","title":"Default Community workflow"},{"location":"workflow/default-workflow/#default-community-workflow","text":"","title":"Default Community workflow"},{"location":"workflow/default-workflow/#anatomy-of-public-community-methodology","text":"","title":"Anatomy of Public Community methodology"},{"location":"workflow/default-workflow/#list-all-flow-available","text":"$ osmedeus scan -f [ flow-name ] -t example.com general - run normal routine # default workflow cidr - Scan for CIDR File domains - run normal routine but without subdomain scan fast - run fast routine slow - run slow routine sync - Sync result based on git test - testing workflow urls - Scan for List of URLs vuln - run fast routine with vuln scan","title":"List all flow available"},{"location":"workflow/other-fields/","text":"Other Fields \u00b6 Type & Flow \u00b6 Type tag (Only avaliable flow file) is a folder name that will contains module file. For example if you run the scan osmedeus scan -f general -t example.com with module like below. It will look for module file general/subdomain.yaml and general/probing.yaml to run. name : general desc : run normal routine type : general validator : domain routines : - modules : - subdomain - modules : - probing - flow : 'slow' # override the type: general to look for module name slow/portscan.yaml modules : - portscan Validator \u00b6 Validator tag allows you to check the format of the input first before actually running the scan. validator : domain # -t example.com # or validator : cidr-file # -t file-of-cidr.txt Here are some built-in formats that available in the Engine domain url ipv4 cidr you can also add -file after each name to validate input as a file (e.g: cidr-file ).","title":"Other Fields"},{"location":"workflow/other-fields/#other-fields","text":"","title":" Other Fields"},{"location":"workflow/other-fields/#type-flow","text":"Type tag (Only avaliable flow file) is a folder name that will contains module file. For example if you run the scan osmedeus scan -f general -t example.com with module like below. It will look for module file general/subdomain.yaml and general/probing.yaml to run. name : general desc : run normal routine type : general validator : domain routines : - modules : - subdomain - modules : - probing - flow : 'slow' # override the type: general to look for module name slow/portscan.yaml modules : - portscan","title":"Type &amp; Flow"},{"location":"workflow/other-fields/#validator","text":"Validator tag allows you to check the format of the input first before actually running the scan. validator : domain # -t example.com # or validator : cidr-file # -t file-of-cidr.txt Here are some built-in formats that available in the Engine domain url ipv4 cidr you can also add -file after each name to validate input as a file (e.g: cidr-file ).","title":"Validator"},{"location":"workflow/parameters/","text":"Parameters \u00b6 Parameters will be replace when the routine running. Default Parameters that built-in the Engine \u00b6 Default variable Assume you use default config at ~/.osmedeus/config.yaml {{.Workspaces}} Workspaces path ~/.osmedeus/workspaces {{.Storages}} Storages path ~/.osmedeus/storages {{.Binaries}} Binary path ~/osmedeus-base/binaries {{.Data}} Data path ~/osmedeus-base/data {{.Scripts}} Script path ~/osmedeus-base/scripts {{.BaseFolder}} Base path ~/osmedeus-base {{.Workflow}} Workflow path ~/osmedeus-base/workflow {{.Cloud}} Cloud path ~/osmedeus-base/cloud Parameters generated from input \u00b6 Dynamic variable E.g command: osmedeus scan -t example.com {{.Target}} example.com {{.Workspace}} just like {{.Target}} but strip out / char to _ . For example example.com/a/b --> example.com_a_b {{.Output}} {{.Output}} == {{.Workspaces}} + {{.Workspace}} {{.Org}} example {{.custom}} Extra param take from --params 'custom=anything'","title":"Parameters"},{"location":"workflow/parameters/#parameters","text":"Parameters will be replace when the routine running.","title":" Parameters"},{"location":"workflow/parameters/#default-parameters-that-built-in-the-engine","text":"Default variable Assume you use default config at ~/.osmedeus/config.yaml {{.Workspaces}} Workspaces path ~/.osmedeus/workspaces {{.Storages}} Storages path ~/.osmedeus/storages {{.Binaries}} Binary path ~/osmedeus-base/binaries {{.Data}} Data path ~/osmedeus-base/data {{.Scripts}} Script path ~/osmedeus-base/scripts {{.BaseFolder}} Base path ~/osmedeus-base {{.Workflow}} Workflow path ~/osmedeus-base/workflow {{.Cloud}} Cloud path ~/osmedeus-base/cloud","title":"Default Parameters that built-in the Engine"},{"location":"workflow/parameters/#parameters-generated-from-input","text":"Dynamic variable E.g command: osmedeus scan -t example.com {{.Target}} example.com {{.Workspace}} just like {{.Target}} but strip out / char to _ . For example example.com/a/b --> example.com_a_b {{.Output}} {{.Output}} == {{.Workspaces}} + {{.Workspace}} {{.Org}} example {{.custom}} Extra param take from --params 'custom=anything'","title":"Parameters generated from input"},{"location":"workflow/use-your-own-wordlists/","text":"Use your own wordlists \u00b6 You can start your own wordlists to brute force dns and directory at ~/osmedeus-base/workflow Table below is how I like to structure it but you can edit any file if you want. Directory \u00b6 Directory Wordlists Description ~/osmedeus-base/data/content/small.txt Use for Directory scan of common module ~/osmedeus-base/data/content/medium.txt Use for Directory scan of medium module ~/osmedeus-base/data/content/big.txt Use for Directory scan of slow module Dns \u00b6 Dns Wordlists Description ~/osmedeus-base/data/dns/shorts.txt Use for Dns Brute-forcing module ~/osmedeus-base/data/resolvers.txt Resolver list for Dns Brute-forcing module","title":"Use Your Own wordlists"},{"location":"workflow/use-your-own-wordlists/#use-your-own-wordlists","text":"You can start your own wordlists to brute force dns and directory at ~/osmedeus-base/workflow Table below is how I like to structure it but you can edit any file if you want.","title":"Use your own wordlists"},{"location":"workflow/use-your-own-wordlists/#directory","text":"Directory Wordlists Description ~/osmedeus-base/data/content/small.txt Use for Directory scan of common module ~/osmedeus-base/data/content/medium.txt Use for Directory scan of medium module ~/osmedeus-base/data/content/big.txt Use for Directory scan of slow module","title":"Directory"},{"location":"workflow/use-your-own-wordlists/#dns","text":"Dns Wordlists Description ~/osmedeus-base/data/dns/shorts.txt Use for Dns Brute-forcing module ~/osmedeus-base/data/resolvers.txt Resolver list for Dns Brute-forcing module","title":"Dns"}]}